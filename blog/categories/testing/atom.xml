<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Testing | Artsy Engineering]]></title>
  <link href="http://artsy.github.com/blog/categories/testing/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2013-02-09T13:44:12-05:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[How to Run RSpec Test Suites in Parallel with JenkinsCI Build Flow]]></title>
    <link href="http://artsy.github.com/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/"/>
    <updated>2012-10-09T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow</id>
    <content type="html"><![CDATA[<p>We now have over 4700 RSpec examples in one of our projects. They are stable, using the techniques described in an <a href="/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">earlier post</a> and organized in <a href="/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">suites</a>. But they now take almost 3 hours to run, which is clearly unacceptable.</p>

<p>To solve this, we have parallelized parts of the process with existing tools, and can turn a build around in just under an hour. This post will dive into our <a href="http://jenkins-ci.org/">Jenkins</a> build flow setup.</p>

<p>To keep things simple, we're going to only build the <code>master</code> branch. When a change is committed on <code>master</code> we're going to push <code>master</code> to a <code>master-ci</code> branch and trigger a distributed build on <code>master-ci</code>. Once all the parts have finished, we'll complete the build by pushing <code>master-ci</code> to <code>master-succeeded</code> and notify the dev team of success or failure.</p>

<p>Here's a diagram of what's going on.</p>

<p><img src="http://artsy.github.com/images/2012-10-09-how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/master-ci.png"></p>

<!-- more -->


<h2>Plugins</h2>

<p>Install the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin">Build Flow</a> and the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">Parameterized Trigger</a> plugin. Grant <code>Anonymous</code> job read permissions in Jenkins system configuration (see <a href="https://issues.jenkins-ci.org/browse/JENKINS-14027">JENKINS-14027</a>).</p>

<p>Create the following Jenkins jobs.</p>

<h2>master-prequel</h2>

<p>A free-style job that connects to the SCM, in our case Git.</p>

<ul>
<li>Set SCM repository URL to your Git repo, eg. <code>git@github.com:spline/reticulator.git</code></li>
<li>Change the default branch specifier from <code>**</code> to <code>master</code>. We'll be pushing a <code>master-ci</code> branch, which could, in turn, cause more builds if you don't do this.</li>
<li>Add a post-build action to build another project. Trigger the <code>master</code> project if the build succeeds.</li>
</ul>


<h2>master</h2>

<p>This is a build-flow job. We'll describe the individual tasks that the flow invokes further. The flow DSL looks as follows.</p>

<p><code>ruby
build("master-ci-init")
parallel (
 { build("master-ci-task", tasks: "spec:suite:models:ci") },
 { build("master-ci-task", tasks: "spec:suite:api:ci") },
 { build("master-ci-task", tasks: "spec:suite:integration:ci") }
)
build("master-ci-succeeded")
</code></p>

<p>This is a good place to add an e-mail notification post-build action for every unstable build.</p>

<h2>master-ci-init</h2>

<p>A free-style job that creates the <code>master-ci</code> branch from master. It needs to be connected to your SCM and executes the following shell script.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>git checkout $GIT_BRANCH
git push origin -f $GIT_BRANCH:$GIT_BRANCH-ci
```</p>

<p>Note that we cannot combine this task with <code>master-prequel</code>, because we have to make sure the branch creation runs once under the entire flow, while <code>master-prequel</code> can be run multiple times, once per check-in. Otherwise the <code>master-ci</code> branch could get updated before a <code>master-ci-task</code> runs from a previous flow execution.</p>

<h2>master-ci-task</h2>

<p>A parameterized build that accepts a <code>tasks</code> parameter that the flow will pass in.</p>

<p>Change the default branch specifier to <code>master-ci</code> and execute the following shell script.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>bundle install
bundle exec rake $tasks
```</p>

<p>This example runs <code>rake $tasks</code>, which we define to be various test suites in our flow DSL. Our test suite setup is described in <a href="/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">this post</a>. Your mileage may vary.</p>

<h2>master-ci-succeeded</h2>

<p>This is an optional step. We use this free-style job to tag <code>master-ci</code> as <code>master-succeeded</code> with the following shell script.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>git checkout $GIT_BRANCH
git push origin -f $GIT_BRANCH:${GIT_BRANCH/%-ci/}-succeeded
```</p>

<p>Our deployment to production will pickup the <code>master-succeeded</code> branch when it's time.</p>

<h2>Improvements?</h2>

<p>I see a few possible improvements here that might require a bit of work.</p>

<ul>
<li>The ability to split an RSpec suite up across an arbitrary number N sub-jobs and M executors would create an optimal parallel split based on the resources available.</li>
<li>Passing the value of <code>GIT_BRANCH</code> and <code>GIT_COMMIT</code> across these jobs would enable building any branch and eliminate the need for <code>master-ci-init</code>.</li>
<li>Build flow could support SCM polling the same way as free-style jobs, avoiding the need for <code>master-prequel</code>. We weren't able to get a stable notification of changes from Github with the Jenkins Github plugin.</li>
</ul>


<p>Please suggest further improvements in the comments below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing with Delayed Jobs]]></title>
    <link href="http://artsy.github.com/blog/2012/08/16/testing-with-delayed-jobs/"/>
    <updated>2012-08-16T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/08/16/testing-with-delayed-jobs</id>
    <content type="html"><![CDATA[<p>A mean bug made it into our production environment. It wasn't caught by our extensive test suite and caused thousands of emails to be sent to a handful of people. The root cause was an unfortunate combination of <a href="https://github.com/plataformatec/devise">Devise</a>, <a href="https://github.com/collectiveidea/delayed_job">DelayedJob</a> and, of course, our own code. It was an easy fix, but nobody ever wants this to happen again.</p>

<p>tl;dr DelayedJob says it's possible to set <code>Delayed::Worker.delay_jobs = false</code> for your tests. Don't do it.</p>

<!-- more -->


<p>Consider the following <code>User</code> model that implements various Devise strategies which support some kind of notification.</p>

<p>``` ruby app/models/user.rb
class User
  include Mongoid::Document</p>

<p>  devise :database_authenticatable, :registerable, ...</p>

<p>  field :notified_at, type: DateTime
  after_save :notify!, :if => :notify?</p>

<p>  def notify!</p>

<pre><code>super
update_attributes!({ notified_at: Time.now.utc })
</code></pre>

<p>  end
end</p>

<p><code>``
We are overriding a black box</code>notify!` method and updating an attribute with a timestamp of the last notification.</p>

<p>Let's write a test.</p>

<p>``` ruby spec/models/user_spec.rb
describe User do</p>

<p>  subject { User.new }</p>

<p>  context "notification" do</p>

<pre><code>it "sends one email" do
  expect {
    subject.notify!
  }.to change(ActionMailer::Base.deliveries, :count).by(1)
end

it "updates notified_at" do
  expect { 
    subject.notify!
  }.to change(subject, :notified_at)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>All green. But once this code hit production, <code>notify!</code> was called in an infinite loop. How is that possible?</p>

<p>The call to <code>notify!</code> is delayed using DelayedJob in production and is not delayed in test. It does not work under DelayedJob and will create as many delayed notifications as it possibly can until it runs out of stack space.</p>

<p>As a common pattern in Devise, the implementation of <code>notify!</code> relies on an instance variable to signal that a notification has been sent. Setting the instance variable avoids sending the notification twice for multiple calls to <code>save!</code>. Our <code>after_save</code> callback invokes <code>update_attributes!</code>, which causes another <code>notify!</code> call unless <code>notify?</code> returns <code>false</code>. In a test, the call to <code>super</code> inside <code>notify!</code> will execute the notification (setting the instance variable), but will create a delayed job in production (without setting it).</p>

<p>We'll start by bringing our tests closer to a real production environment by leaving <code>Delayed::Worker.delay_jobs = true</code> and making sure our problem is reproduced with a spec. We could call <code>Delayed::Worker.new.work_off</code> for every test that needs to execute a delayed job, but that would be rather tedious. A better approach may be to register an observer that will execute a delayed job every time one is created. This is similar to a production environment where having enough delayed workers almost guarantees a job is picked up immediately after being scheduled.</p>

<p>``` ruby config/initializers/delayed_job_observer.rb
class DelayedJobObserver &lt; Mongoid::Observer
  observe Delayed::Job</p>

<p>  class &lt;&lt; self</p>

<pre><code>attr_accessor :runs
</code></pre>

<p>  end</p>

<p>  def after_create(delayed_job)</p>

<pre><code>delayed_job.invoke_job
DelayedJobObserver.runs += 1
</code></pre>

<p>  end
end</p>

<p>DelayedJobObserver.runs = 0
```</p>

<p>The complete code, which handles a few more cases, including enabling and disabling the observer, and counting successful runs and errors can be found in <a href="https://gist.github.com/3370052">this gist</a>. Please help us improve it.</p>

<p>We can now test our notification without compromising on the delayed nature of the job and add a test making sure we create a single delayed job from a call to <code>notify!</code>.</p>

<p>``` ruby spec/models/user_spec.rb
describe User do</p>

<p>  subject { User.new }</p>

<p>  context "notification" do</p>

<pre><code>it "creates one delayed job" do
  expect {
    subject.notify!
  }.to change(DelayedJobObserver, :runs).by(1)
end
</code></pre>

<p>  end</p>

<p>end
```</p>

<p>This test will also run for a long time before failing with a stack overflow error. Our fix was not to call <code>notify!</code> from an <code>after_save</code> callback.</p>

<p>We've suggested that immediate execution using an observer becomes a feature in DelayedJob in <a href="https://github.com/collectiveidea/delayed_job/issues/423">#423</a>. Please add your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On-Demand Jenkins Slaves with Amazon EC2]]></title>
    <link href="http://artsy.github.com/blog/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/"/>
    <updated>2012-07-10T13:30:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>The <a href="http://artsy.net">Artsy</a> team faithfully uses <a href="http://jenkins-ci.org">Jenkins</a> for continuous integration. <a href="http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/">As we've described before</a>, our Jenkins master and 8 slaves run on Linode. This arrangement has at least a few drawbacks:</p>

<ul>
<li>Our Linode servers are manually configured. They require frequent maintenance, and inconsistencies lead to surprising build failures.</li>
<li>The fixed set of slaves don't match the pattern of our build jobs: jobs get backed up during the day, but servers are mostly unused overnight and on weekends.</li>
</ul>


<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin">Amazon EC2 Plugin</a> allowed us to replace those slaves with a totally scripted environment. Now, slaves are spun up in the cloud whenever build jobs need them.</p>

<!-- more -->


<p>To set up the build slave's Amazon Machine Image (AMI), we started from an <a href="http://cloud-images.ubuntu.com/releases/oneiric/release/">official Ubuntu 11.10</a> (Oneiric Ocelot) AMI, ran initialization scripts to set up our build dependencies (MongoDB, Redis, ImageMagick, Firefox, RVM, NVM, etc.), packaged our modified instance into its own AMI, and then set up the EC2 Plugin to launch instances from this custom AMI.</p>

<p>Our AMI setup steps are captured entirely in a <a href="https://gist.github.com/3085368">GitHub gist</a>, but because our build requirements are specific to our applications and frameworks, most organizations will need to modify these scripts to their own use cases. Given that caveat, here's how we went from base Ubuntu AMI to custom build slave AMI:</p>

<ol>
<li>We <a href="https://console.aws.amazon.com/ec2/home?region=us-east-1#launchAmi=ami-4dad7424">launched</a> an Ubuntu 11.10 AMI <code>4dad7424</code> via the AWS console.</li>
<li>Once the instance was launched, we logged in with the SSH key we generated during setup.</li>
<li><p>We ran the following commands to configure the instance:</p>

<pre><code> curl -L https://raw.github.com/gist/3085368/_base-setup.sh | sudo bash -s
 sudo su -l jenkins
 curl -L https://raw.github.com/gist/3085368/_jenkins-user-setup.sh | bash -s
</code></pre></li>
<li><p>From the "Instances" tab of the AWS Console, we chose the now-configured instance, and from the "Instance Actions" dropdown, selected "Stop", followed by "Create Image (EBS AMI)".</p></li>
</ol>


<p>Next we installed the Amazon EC2 Plugin on our Jenkins master, and entered the following configuration arguments for the plugin. (Replace the AMI ID with your own, the result of Step 4 above.)</p>

<p><img src="/images/2012-07-10-on-demand-jenkins-slaves-with-amazon-ec2/ec2-plugin-config.png" title="[Jenkins EC2 Plugin configuration]" ></p>

<p>New build slaves began spawning immediately in response to job demand! Our new "Computers" page on Jenkins looks like this:</p>

<p><img src="/images/2012-07-10-on-demand-jenkins-slaves-with-amazon-ec2/computer-list.png" title="[Jenkins computer list]" ></p>

<p>We have the option of provisioning a new build slave via a single click, but so far, this hasn't been necessary, since slaves have automatically scaled up and down with demand. We average around 4-8 build slaves during the day, and 0-1 overnight and on weekends.</p>

<h2>Outcome and Next Steps</h2>

<p>This arrangement hasn't been in place for long, but we're excited about the benefits it's already delivered:</p>

<ul>
<li>Builds now take a predictable amount of time, since slaves automatically scale up to match demand.</li>
<li>Slaves offer a more consistent and easily maintained configuration, so there are fewer spurious failures.</li>
<li>Despite higher costs on EC2, we hope to spend about the same (or maybe even less) now that we'll need to operate only the master server during periods of inactivity (like nights and weekends).</li>
</ul>


<p>As proponents of <em>automating the hard stuff</em>, we get a real kick out of watching identical slaves spin up as builds trickle in each morning, then disappear as the queue quiets down in the evening. Still, there are a few improvements to be made:</p>

<ul>
<li>Our canonical slave's configuration should be scripted with <a href="http://www.opscode.com/chef/">Chef</a>.</li>
<li>Sharp-eyed readers will notice that our Jenkins master is still a Linode server. It might benefit from the same type of scripted configuration as the slaves.</li>
<li>Cooler still would be for the EC2 plugin to take advantage of Amazon's <a href="http://aws.amazon.com/ec2/spot-instances/">spot pricing</a>. Though not supported at the moment, it would allow us to spend a fraction as much (or spend the same amount, but on more powerful resources).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Using Jenkins for Ruby and Ruby-on-Rails Teams]]></title>
    <link href="http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/"/>
    <updated>2012-05-27T08:15:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams</id>
    <content type="html"><![CDATA[<p>The <a href="http://jenkins-ci.org">Jenkins CI</a> project has grown tremendously in the past few months. There're now hundreds of plugins and an amazing engaged community. Artsy is a happy user and proud contributor to this effort with the essential <a href="https://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin">jenkins-ansicolor plugin</a>, eliminating boring console output since 2011.</p>

<p>We are a continuous integration, deployment and devops shop and have been using Jenkins for over a year now. We've shared our experience at the <a href="http://www.cloudbees.com/juc2012.cb">Jenkins User Conference 2012</a> in <a href="http://www.slideshare.net/dblockdotorg/graduating-to-jenkins-ci-for-rubyonrails-teams">a presentation</a>. This blog post is an overview of how to get started with Jenkins for Ruby(-on-Rails) teams.</p>

<p><img src="/images/2012-05-27-using-jenkins-for-ruby-on-rails-teams/jenkins.png" title="[Artsy Jenkins CI]" ></p>

<!-- more -->


<p>When Artsy had only three engineers, we hesitated to deploy Jenkins. The CI server was written in Java (i.e. wasn't written in Ruby). We feared introducing excessive infrastructure too early. In retrospect, we were not in the business of building CI infrastructure, so not using Jenkins was a mistake. Since we adopted it, Jenkins has been operating painlessly and scaled nicely as our needs continued to grow.</p>

<p>Today, we run a single virtual server on <a href="http://www.linode.com">Linode</a> as our master Jenkins and have 8 Linode slaves. These are all $19 per month plans. Our usage is variable: few builds in the middle of the night and a very high number of builds during the day, so we're planning on trying to build a Jenkins-slave on-demand system on AWS eventually.</p>

<p>Setting up a Jenkins master is straightforward.</p>

<p><code>bash
useradd -m jenkins -p [password] -s /bin/bash
addgroup jenkins sudo
wget -q -O - http://pkg.jenkins-ci.org/debian/jenkins-ci.org.key | sudo apt-key add –
sudo sh -c 'echo deb http://pkg.jenkins-ci.org/debian binary/ &gt; /etc/apt/sources.list.d/jenkins.list'
sudo aptitude update
sudo aptitude install jenkins
</code></p>

<p>We change Jenkins port in <code>/etc/default/jenkins</code>, add the machine to DNS and update the Jenkins URL to an externally visible one in the "Manage Jenkins", "Configure System" menu. We enable and use "Matrix-Based Security" with a single user that all developers share and give the user permission to do everything in the same UI. Finally, we configure the Git Plugin with a global username and e-mail from our shared IT account that has Github access, setup a Github Web Hook and SMTP E-Mail notifications. Restarting Jenkins from the command line with <code>sudo service jenkins restart</code> completes the initial setup.</p>

<p>It's also a good idea to setup Jenkins configuration backup with <a href="https://wiki.jenkins-ci.org/display/JENKINS/thinBackup">thinBackup</a>, install <a href="http://wiki.jenkins-ci.org/display/JENKINS/AnsiColor+Plugin">AnsiColor</a> and, of course, enable <a href="http://wiki.hudson-ci.org/display/HUDSON/ChuckNorris+Plugin">Chuck Norris</a>.</p>

<p>A typical Ruby development environment includes <a href="https://rvm.io/">RVM</a>, a working GIT client and a Github SSH key. We install these under our <code>jenkins</code> user manually on the first slave Linode and then clone slaves when we need more. RVM setup includes entries in <code>~/.bash_profile</code>, so a Jenkins job for a Ruby project can load that file and execute commands, including <code>rake</code>.</p>

<p>``` bash</p>

<h1>!/bin/bash</h1>

<p>source ~/.bash_profile
rvm use 1.9.2
gem install bundler
bundle install
bundle exec rake
```</p>

<p>Our default Ruby project Rake task is <code>test:ci</code>. We run Jasmine and Capybara tests using a real browser, so we need to redirect all visible output to an X-Windows Virtual Frame Buffer (<a href="http://www.xfree86.org/4.0.1/Xvfb.1.html">XVFB</a>). This can be done by setting an <code>ENV</code> variable inside a Rake task. Our test target also <a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">organizes our tests in suites</a>.</p>

<p><code>ruby
namespace :test do
  task :specs, [ :display ] =&gt; :environment do |t, args|
   ENV['DISPLAY'] = args[:display] if args[:display]
   Rake::Task['spec:suite:all'].invoke
  end
      
  task :jasmine, [ :display ] =&gt; :environment do |t, args|
    ENV['DISPLAY'] = args[:display] if args[:display]
    system!("bundle exec rake jasmine:ci")
  end
    
  task :all, [ :display ] =&gt; :environment do |t, args|
    Rake::Task['assets'].invoke
    Rake::Task['test:jasmine'].invoke(args[:display])
    Rake::Task['test:specs'].invoke(args[:display])
  end
      
  task :ci do
    Rake::Task['test:all'].invoke(":99")
  end
      
end
</code></p>

<p>A successful CI test run will trigger a deployment to a staging environment on Heroku.</p>

<p>``` ruby
namespace :deploy do
  task :staging => :environment do
    system!("bundle exec heroku maintenance:on --app=app-staging")</p>

<pre><code>system!("git push git@heroku.com:app-staging.git origin/staging:master")    
system!("bundle exec heroku maintenance:off --app=app-staging")
</code></pre>

<p>  end
end
```</p>

<p>You'll notice that we execute system commands with <code>system!</code>. Unlike the usual <code>system</code> method, our wrapper raises an exception when a command returns a non-zero error code to abort execution.</p>

<p><code>ruby
def system!(cmdline)
  logger.info("[#{Time.now}] #{cmdline}")
  rc = system(cmdline)
  "failed with exit code #{$?.exitstatus}" if (rc.nil? || ! rc || $?.exitstatus != 0)
end
</code></p>

<p>Our production deployment task is also a Jenkins job.</p>

<p>``` ruby
namespace :deploy do
  task :production => :environment do</p>

<pre><code>system!("git push git@heroku.com:app-production.git origin/production:master")
</code></pre>

<p>  end
end
```</p>

<p>We don't want any downtime on our production environment, so we don't turn Heroku maintance on. Our staging deployment task also includes copying production data to staging, so we chose to enable maintenance to avoid people hitting the test environment while it's being built and may be in a half-baked state.</p>

<p>Finally, we also run production daily cron-like tasks via Jenkins. It gives us email notifications, console output and the ability to manually trigger them. Centralizing operations in the same environment as CI creates truly continuous integration, deployment and operations.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Organize Over 3000 RSpec Specs and Retry Test Failures]]></title>
    <link href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/"/>
    <updated>2012-05-15T12:00:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures</id>
    <content type="html"><![CDATA[<p>Having over three thousand RSpec tests in a single project has become difficult to manage. We chose to organize these into suites, somewhat mimicking our directory structure. And while we succeeded at making our Capybara integration tests more reliable (see <a href="/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">Reliably Testing Asynchronous UI with RSpec and Capybara</a>), they continue relying on finicky timeouts. To avoid too many false positives we've put together a system to retry failed tests. We know that a spec that fails twice in a row is definitely not a fluke!</p>

<p>Create a new Rake file in <code>lib/tasks/test_suites.rake</code> and declare an array of test suites.</p>

<p>``` ruby lib/tasks/test_suites.rake
  SPEC_SUITES = [</p>

<pre><code>{ :id =&gt; :models, :pattern =&gt; "spec/models/**/*_spec.rb" },
{ :id =&gt; :controllers, :pattern =&gt; "spec/controllers/**/*_spec.rb" },
{ :id =&gt; :views, :pattern =&gt; "spec/views/**/*_spec.rb" }
</code></pre>

<p>  ]
```</p>

<!-- more -->


<p><code>RSpec::Core</code> contains a module called <code>RakeTask</code> that will programmatically create Rake tasks for you.</p>

<p>``` ruby lib/tasks/test_suites.rake
require 'rspec/core/rake_task'</p>

<p>namespace :test
  namespace :suite</p>

<pre><code>RSpec::Core::RakeTask.new("#{suite[:id]}:run") do |t|
  t.pattern = suite[:pattern]
  t.verbose = false
  t.fail_on_error = false
end
</code></pre>

<p>  end
end
```</p>

<p>Run <code>rake -T</code> to ensure that the suites have been generated. To execute a suite, run <code>rake test:suite:models:run</code>. Having a test suite will help you separate spec failures and enables other organizations than by directory, potentially allowing you to tag tests across multiple suites.</p>

<p><code>bash
rake spec:suite:models:run
rake spec:suite:controllers:run
rake spec:suite:views:run
</code></p>

<p>Retrying failed specs has been a long requested feature in RSpec (see <a href="https://github.com/rspec/rspec-core/issues/456">#456</a>). A viable approach has been finally implemented by <a href="https://github.com/antifun">Matt Mitchell</a> in <a href="https://github.com/rspec/rspec-core/pull/596">#596</a>. There're a few issues with that pull request, but two pieces have already been merged that make retrying specs feasible outside of RSpec.</p>

<ul>
<li><a href="https://github.com/rspec/rspec-core/pull/610">#610</a>:
A fix for incorrect parsing input files specified via <code>-O</code>.</li>
<li><a href="https://github.com/rspec/rspec-core/pull/614">#614</a>:
A fix for making the <code>-e</code> option cumulative, so that one can pass multiple example names to run.</li>
</ul>


<p>Both will appear in the 2.11.0 version of RSpec, in the meantime you have to point your <code>rspec-core</code> dependency to the latest version on Github.</p>

<p><code>ruby Gemfile
"rspec-core", :git =&gt; "https://github.com/rspec/rspec-core.git"
</code></p>

<p>Don't forget to run <code>bundle update rspec-core</code>.</p>

<p>The strategy to retry failed specs is to output a file that contains a list of failed ones and to feed that file back to RSpec. The former can be accomplished with a custom logger. Create <code>spec/support/formatters/failures_formatter.rb</code>.</p>

<p>``` ruby spec/support/formatters/failures_formatter.rb
require 'rspec/core/formatters/base_formatter'</p>

<p>module RSpec
  module Core</p>

<pre><code>module Formatters
  class FailuresFormatter &lt; BaseFormatter

    # create a file called rspec.failures with a list of failed examples
    def dump_failures
      return if failed_examples.empty?
      f = File.new("rspec.failures", "w+")
      failed_examples.each do |example|
        f.puts retry_command(example)
      end
      f.close
    end

    def retry_command(example)
      example_name = example.full_description.gsub("\"", "\\\"")
      "-e \"#{example_name}\""
    end

  end
end
</code></pre>

<p>  end
end
```</p>

<p>In order to use the formatter, we must tell RSpec to <code>require</code> it with <code>--require</code> and to use it with <code>--format</code>. We don't want to lose our settings in <code>.rspec</code> either - all these options can be combined in the Rake task.</p>

<p>``` ruby lib/tasks/test_suites.rake
RSpec::Core::RakeTask.new("#{suite[:id]}:run") do |t|
  t.pattern = suite[:pattern]
  t.verbose = false
  t.fail_on_error = false
  t.spec_opts = [</p>

<pre><code>"--require", "#{Rails.root}/spec/support/formatters/failures_formatter.rb",
"--format", "RSpec::Core::Formatters::FailuresFormatter",
File.read(File.join(Rails.root, ".rspec")).split(/\n+/).map { |l| l.shellsplit }
</code></pre>

<p>  ].flatten
end
```</p>

<p>Once a file is generated, we can feed it back to RSpec in another task, called <code>suite:suite[:id]:retry</code>.</p>

<p>``` ruby lib/tasks/test_suites.rake
RSpec::Core::RakeTask.new("#{suite[:id]}:retry") do |t|
  t.pattern = suite[:pattern]
  t.verbose = false
  t.fail_on_error = false
  t.spec_opts = [</p>

<pre><code>"-O", File.join(Rails.root, 'rspec.failures'),
File.read(File.join(Rails.root, '.rspec')).split(/\n+/).map { |l| l.shellsplit }
</code></pre>

<p>  ].flatten
end
```</p>

<p>Finally, lets combine the two tasks and invoke <code>retry</code> when the <code>run</code> task fails.</p>

<p>``` ruby lib/tasks/test_suites.rake
task "#{suite[:id]}" do
  rspec_failures = File.join(Rails.root, 'rspec.failures')
  FileUtils.rm_f rspec_failures
  Rake::Task["spec:suite:#{suite[:id]}:run"].execute
  unless $?.success?</p>

<pre><code>puts "[#{Time.now}] Failed, retrying #{File.read(rspec_failures).split(/\n+/).count} failure(s) in spec:suite:#{suite[:id]} ..."
Rake::Task["spec:suite:#{suite[:id]}:retry"].execute
</code></pre>

<p>  end
end
```</p>

<p>A complete version of our <code>test_suites.rake</code>, including a <code>spec:suite:all</code> task that executes all specs can be found <a href="https://gist.github.com/2597305">in this gist</a>. Our Jenkins CI runs <code>rake spec:suite:all</code>, with a much improved weather report since we started using this system.</p>
]]></content>
  </entry>
  
</feed>
