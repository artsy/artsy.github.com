<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: JavaScript | Artsy Engineering]]></title>
  <link href="http://artsy.github.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2013-02-09T13:44:12-05:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[The perils of iOS user agent strings]]></title>
    <link href="http://artsy.github.com/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/"/>
    <updated>2012-10-18T15:19:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing</id>
    <content type="html"><![CDATA[<p>There is a great deal of misinformation on the web about detecting an
iPad or an iPhone in JavaScript. The
<a href="http://stackoverflow.com/a/4617648">top answer on stackoverflow</a> -
and many <a href="http://www.sitepoint.com/identify-apple-iphone-ipod-ipad-visitors/">blog posts</a> using <a href="http://www.askdavetaylor.com/detect_apple_iphone_user_web_site_server.html">this technique</a> - are all incorrect.</p>

<p>The conventional wisdom is that iOS devices have a user agent for
Safari and a user agent for the UIWebView. This assumption is
incorrect as iOS apps can and do
<a href="http://stackoverflow.com/a/8666438">customize their user agent</a>. The
main offender here is Facebook, whose iOS app alone accounts for about
1-3% of Artsy's daily traffic.</p>

<p>Compare these user agent strings from iOS devices:
```</p>

<h1>iOS Safari</h1>

<p>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3
iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3</p>

<h1>UIWebView</h1>

<p>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117</p>

<h1>Facebook UIWebView</h1>

<p>iPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]
```</p>

<!-- more -->


<p>The old way to identify iPhone / iPad in JavaScript:
<code>javascript
IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
IS_IPHONE = navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
</code></p>

<p>If you were to go with this approach for detecting iPhone and iPad,
you would end up with IS_IPHONE <em>and</em> IS_IPAD both being true if a user
comes from Facebook on an iPad. That could create some odd behavior!</p>

<p>The correct way to identify iPhone / iPad in JavaScript:
<code>javascript
IS_IPAD = navigator.userAgent.match(/iPad/i) != null;
IS_IPHONE = (navigator.userAgent.match(/iPhone/i) != null) || (navigator.userAgent.match(/iPod/i) != null);
if (IS_IPAD) {
  IS_IPHONE = false;
}
</code></p>

<p>We simply declare <code>IS_IPHONE</code> to be <code>false</code> on iPads to cover for the
bizarre Facebook UIWebView iPad user agent. This is one example of how
<em>user agent sniffing is unreliable</em>. The more iOS apps that customize
their user agent, the more issues user agent sniffing will have. If
you can avoid user agent sniffing (hint: CSS Media Queries), DO
IT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So you want to do a CSS3 3D transform?]]></title>
    <link href="http://artsy.github.com/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform/"/>
    <updated>2012-10-18T00:00:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform</id>
    <content type="html"><![CDATA[<p>This post details the first of many challenges we faced in 3D
transforming the <a href="http://artsy.net">homepage of Artsy</a> (inspired by
<a href="https://github.com/hakimel/meny">Meny</a>): detecting CSS 3D transform
support.</p>

<p>Front-end development is messy in today's fragmented world. At Artsy,
our goal is to do what it takes to provide an incredible experience
for <em>all</em> of our users (IE8+, iOS and the usual suspects). Deploying
bleeding edge tech, like CSS 3D transforms, is an exercise in
compromising principals for practicality -- and managing these
"compromises" in well-documented code.</p>

<p>We looked to <a href="http://modernizr.com/">Modernizr's</a> feature detection approach to provide us with
a reliable way to detect CSS3 3D transform support across browsers. They have some
<a href="https://github.com/Modernizr/Modernizr/issues/590">well</a>-
<a href="https://github.com/Modernizr/Modernizr/issues/465">documented</a>
<a href="https://github.com/Modernizr/Modernizr/issues/240">struggles</a> around
the issue. After flipping most of the tables in the office ┻━┻ ︵ヽ
(`Д´)ﾉ︵﻿ ┻━┻ , we settled on user agent sniffing as the most robust
method for detecting CSS3 3D transform support. But why did none
of the available methods work for us?</p>

<!-- more -->


<p>CSS3 3D transforms involve interaction between the browser and the
graphics card. The browser may be able to parse the 3D declarations
but may not be able to properly instruct the graphics card in how to
render your page. There are many possible outcomes ranging from the
page rendering with lines across it (Safari 4) to the page rendering
beautifully then crashing the browser seconds later (Safari on
iOS4). Any 'feature detection' approach would unacceptably flag these
as 'supports CSS3 3D transforms'. This is one case where 'feature
detection' fails and user agent sniffing (and lots of testing) wins
hands down.</p>

<p>Most feature detection assumes a "supports" or "does not support"
binary. This is not the case with CSS3 3D transforms -- there is a
"gradient of support". Additionally, enabling 3D transforms causes the
page to be re-rendered in an entirely different rendering engine which
then causes other problems (more on this in a later post).</p>

<p>CSS3 3D transform support can be separated into 4 levels:</p>

<ol>
<li>Reliably supports 3D transforms across most machines. For example:
Safari 6.</li>
<li>Can parse and apply 3D transform declarations but ignores the 3D
parts. For example: Chrome on a Retina MacBook Pro.</li>
<li>Can parse and apply 3D transform declarations but renders in
unacceptable ways. For example: Safari 4 and Safari 4/5 on Windows
show lines across the page.</li>
<li>Cannot apply 3D transform declarations in any way. For example:
IE or Firefox &lt; v10.</li>
</ol>


<p>Here are a few popular ways of detecting CSS3 3D transform support and why
they don't work for us:</p>

<p><em>Meny / Hakim's method</em></p>

<p>```coffeescript</p>

<h1>apply these styles to the body in css then see if they are applied in JS</h1>

<p>docStyle = document.body.style
supports3DTransforms =  'WebkitPerspective' in docStyle or</p>

<pre><code>                    'MozPerspective' in docStyle or
                    'msPerspective' in docStyle or
                    'OPerspective' in docStyle or
                    'perspective' in docStyle
</code></pre>

<p>```
This works best and is straightforward code. The only
issue is that it throws a positive for iOS4 causing the browser to
crash and a positive for Safari on Windows and Safari 4 OSX which both
display a grid over the page when using the 3D renderer.</p>

<p><em>iScroll4 method</em></p>

<p><code>coffeescript
has3D = -&gt; 'WebKitCSSMatrix' in window &amp;&amp; 'm11' in new WebKitCSSMatrix()
</code>
This only works reliably Safari in our testing.</p>

<p><em>Modernizer method</em></p>

<p>```coffeescript
ret = !!testPropsAll('perspective')
if ( ret and 'webkitPerspective' in docElement.style )
  # create a dib and see if it moves
  injectElementWithStyles('@media (transform-3D), (-webkit-transform-3D){#modernizr{left:9px;position:absolute;height:3px;}}', (node, rule) -></p>

<pre><code>ret = node.offsetLeft === 9 &amp;&amp; node.offsetHeight === 3;
</code></pre>

<p>```</p>

<p>This creates a div, transforms it, and then checks if it's position
has changed as expected. It only works in reliably in Safari.
It <a href="https://github.com/Modernizr/Modernizr/issues/590">sometimes works in Chrome</a>
but throws a false positive in the case of Chrome on Retina MacBook
Pro as the element does move -- just not in 3D space.</p>

<p><em>User Agent method</em></p>

<p>We want to maintain wide support of new tech while ensuring all users
have a great experience. Modernizr and the feature detection group
have their heart in the right place and do a great job most of the
time. That said, user agent sniffing is the only way to handle the
complex support scenarios inherent in bleeding edge CSS3 tech such as
3D transforms.</p>

<p>Here is our method/hack for identifying browsers that support CSS3 3D
transforms well:</p>

<p>```coffeescript
(->
  docElement = document.documentElement
  uagent = navigator.userAgent.toLowerCase()</p>

<p>  browsers = [</p>

<pre><code>['webkit',  530]        # not well supported in Safari 4, Safari 5 webkit version is 530.17
['chrome',  12]
['mozilla', 10]
['opera',   Infinity]   # not supported
['msie',    Infinity] ] # not supported
</code></pre>

<p>  # From: http://api.jquery.com/jQuery.browser
  uaMatch = (ua) -></p>

<pre><code>match =
  /(chrome)[ \/]([\w.]+)/.exec(ua) or
  /(webkit)[ \/]([\w.]+)/.exec(ua) or
  /(opera)(?:.*version|)[ \/]([\w.]+)/.exec(ua) or 
  /(msie) ([\w.]+)/.exec(ua) or
  ua.indexOf("compatible") &lt; 0 and /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) or
  []
{ browser: (match[ 1 ] or ""), version: (match[2]?.split('.')[0] or 0) }
</code></pre>

<p>  addNo3DTransform = -></p>

<pre><code>docElement.className = docElement.className.replace 'csstransforms3D', ''
docElement.className += ' no-csstransforms3D'
</code></pre>

<p>  add3DTransform = -></p>

<pre><code>docElement.className = docElement.className.replace 'no-csstransforms3D', ''
docElement.className += ' csstransforms3D'
</code></pre>

<p>  # default to no CSS3 3D transform support
  addNo3DTransform()</p>

<p>  match = uaMatch uagent
  for browser in browsers</p>

<pre><code>if browser[0] == match.browser
  if match.version &gt;= browser[1]
    add3DTransform()
  else
    addNo3DTransform()
  break
</code></pre>

<p>  IS_IPHONE = uagent.search('iphone') > -1 or uagent.search('ipod') > -1
  IS_IPAD = uagent.search('ipad') > -1
  IS_IOS = IS_IPHONE or IS_IPAD</p>

<p>  # iOS 6 is our support cut off for iPad
  match = /\os ([0-9]+)/.exec uagent
  IS_LT_IOS6 = match and match[1] and Number(match[1]) &lt; 6</p>

<p>  # 3D transforms are supported but do not work well on iPhone
  if IS_IPHONE</p>

<pre><code>addNo3DTransform()
</code></pre>

<p>  # disable 3D transform for older versions of Safari on iPad
  else if IS_IPAD and IS_LT_IOS6</p>

<pre><code>addNo3DTransform()
</code></pre>

<p>  # deactivate 3D transform for Safari on Windows
  else if navigator.userAgent.search('Safari') > -1 and navigator.userAgent.search('Windows') > -1</p>

<pre><code>addNo3DTransform()
</code></pre>

<p>)()
```</p>

<p>If you would like to take issue with or improve this code please check
it out <a href="https://github.com/zamiang/detect-css3-3D-transform">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing #! Routes with PushState Using Backbone.js]]></title>
    <link href="http://artsy.github.com/blog/2012/06/25/replacing-hashbang-routes-with-pushstate/"/>
    <updated>2012-06-25T11:35:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/06/25/replacing-hashbang-routes-with-pushstate</id>
    <content type="html"><![CDATA[<blockquote><p>The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.</p>

<p>&ndash; Isaac Asimov</p></blockquote>

<h2>R.I.P #!</h2>

<p>It did not take us long to discover we shared the concerns of Twitter's
<a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb on hashbang routes</a>,
but it was almost a year before we were able to remove them from Artsy. Here's how it went down.</p>

<p>Artsy relies on the <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
<a href="http://caniuse.com/#feat=history">browsers that don't support the HTML5 History API</a> (looking at you IE 9).</p>

<p>The pushState routing is optional, but <em>"the world as it should be"</em> suggests we say "Yes!" (or true) to pushState.
<code>coffeescript
Backbone.history.start({ pushState: true })
</code></p>

<!-- more -->


<h3>The Client</h3>

<p>At Artsy, we had left Backbone out of the loop for most of our internal linking. Our markup href attributes all
began with '/#!' and expected the browser's default hash behavior to keep the page from refreshing. For a proper
pushState scheme, the app's internal linking should begin with an absolute route. Backbone.js defaults to '/', but
this is configurable.
```coffeescript</p>

<h1>Optional root attribute defaults to '/'</h1>

<p>Backbone.history.start
  pushState: true
  root: "/specialized/client/"
```</p>

<h4>Internal Links</h4>

<p>All internal links need to begin with your configured root ('/' for Artsy).
Be sure to leave out your domain (<del>http://artsy.net</del>).
```html
<a href="http://artsy.github.com/">Home</a></p>

<p><a href="http://artsy.github.com/artwork/matthew-abbott-lobby-and-supercomputer">My Favorite Work</a>
```</p>

<p>We now needed a global link handler that will leverage Backbone's <code>navigate</code> method which takes
care of updating the URL and avoiding a page refresh or alternatively wiring up the hashtag fallback.
Since we follow the convention of starting all <code>href</code> attributes with our application's root, we
can match on that in our selector to get all anchors whose link begins with our root, <code>a[href^='/']</code>.
This link handler is a great place to ensure backward compatibility while #!s are removed from
internal links.</p>

<p>```coffeescript</p>

<h1>Globally capture clicks. If they are internal and not in the pass</h1>

<h1>through list, route them through Backbone's navigate method.</h1>

<p>$(document).on "click", "a[href<sup>='/']",</sup> (event) -></p>

<p>  href = $(event.currentTarget).attr('href')</p>

<p>  # chain 'or's for other black list routes
  passThrough = href.indexOf('sign_out') >= 0</p>

<p>  # Allow shift+click for new tabs, etc.
  if !passThrough &amp;&amp; !event.altKey &amp;&amp; !event.ctrlKey &amp;&amp; !event.metaKey &amp;&amp; !event.shiftKey</p>

<pre><code>event.preventDefault()

# Remove leading slashes and hash bangs (backward compatablility)
url = href.replace(/^\//,'').replace('\#\!\/','')

# Instruct Backbone to trigger routing events
App.router.navigate url, { trigger: true }

return false
</code></pre>

<p>```
Thank you TenFarms for the excellent write up on <a href="http://dev.tenfarms.com/posts/proper-link-handling">proper link handling for pushState enabled browsers</a>.</p>

<h4>External Links</h4>

<p>The application will need a small check early in the initialization process to redirect external
links still expecting the #! routing scheme.
```coffeescript</p>

<h1>Our Backbone App namespace</h1>

<p>window.App =
  # Namespace Backbone components
  Models: {}
  Collections: {}
  Views: {}
  redirectHashBang: -></p>

<pre><code>window.location = window.location.hash.substring(2)
</code></pre>

<h1>DOM is ready, are we routing a #!?</h1>

<p>$ ->
  if window.location.hash.indexOf('!') > -1</p>

<pre><code>return App.redirectHashBang()
</code></pre>

<p>  # else... continue on with initialization
```</p>

<h3>The Server</h3>

<p>Now that our app will receive requests to full URLs
'http://artsy.net/artwork/mattew-abbott-lobby-and-supercomputer'
instead of 'http://artsy.net/#!/artwork/mattew-abbott-lobby-and-supercomputer',
we need to update our Rails setup.</p>

<p>Below is an excerpt from our Rails application's router.
Note references to our home and artworks controllers. Both use a <code>before</code> filter
to determine a user's authentication state and serve a different layout, with
unique assets or Backbone applications.</p>

<p>Controllers related to specific models now have the opportunity to
bootstrap associated JSON or mark up and we now get expected 404 (file not found)
error behavior without extra work required by a hash routing scheme.</p>

<p>```ruby</p>

<h1>Server - Rails</h1>

<p>Application.routes.draw do</p>

<p>  root :to => "home#index"</p>

<p>  # Controller logic determines the layout and could bootstrap data
  resources :artworks, path: "artwork", only: :show</p>

<p>  # Plural to singular redirect - mistakes happen!
  get "/artworks/:id" => redirect('/artwork/%{id}')</p>

<p>  # No match? Rails handles routing the 404 error.</p>

<p>end
```</p>

<p>An added bonus here is a near one to one mapping with the Rails and client routes.</p>

<p>```coffeescript</p>

<h1>Backbone.js - Client</h1>

<p>class App.Routers.Client extends Backbone.Router</p>

<p>  routes:</p>

<pre><code>''            : 'home'
'artwork/:id' : 'artwork'
'artworks/:id': 'redirectToArtwork'
</code></pre>

<p>```</p>

<h2>URLs R 4 Ever</h2>

<p>Dan Webb's assertion that <a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">URLs are forever</a> is correct,
but so is Isaac Asimov's statement on change. You can't predict the future.
You make decisions based on the best data you have at the time. We started our app with hashtag routing
in early 2011 and added the ! around five months later (about the same time Dan Webb wrote his post).
Had we started Artsy today, even six months ago, I'm confident we would have enabled Backbone's pushState routing.
There's no need to look back. The future is here and its URLs are #! free!</p>

<h3>Footnotes</h3>

<ul>
<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
<li><a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Google offers #! to aid the crawlability of AJAX hash routed applications</a></li>
<li><a href="http://caniuse.com/#feat=history">Browser support for the HTML5 History API (aka pushState)</a></li>
<li><a href="http://www.adequatelygood.com/2011/2/Thoughts-on-the-Hashbang">Twitter advocates #!</a></li>
<li><a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb's critique <em>It's About the Hashbangs</em></a></li>
<li><a href="http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html">Twitter ditches #!</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How To Redirect Bang Hash Urls]]></title>
    <link href="http://artsy.github.com/blog/2012/03/06/how-to-redirect-bang-hash-urls/"/>
    <updated>2012-03-06T09:02:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/03/06/how-to-redirect-bang-hash-urls</id>
    <content type="html"><![CDATA[<p>Sometimes you type a hash-bang URL too fast, bang first.</p>

<p>Consider <code>http://artsy.net/!#/log_in</code>. Rails will receive <code>/!</code> as the file path, resulting in a 404, File Not Found error. The part of the URL after the hash is a position within the page and is never sent to the web server.</p>

<p>It's actually pretty easy to handle this scenario and redirect to the corresponding hash-bang URL.</p>

<p>The most straightforward way is to create a file called <code>!.html</code> in your <code>public</code> folder and use JavaScript to rewrite the URL with the bang-hash.</p>

<p>``` html public/!.html
<html>
 <head>
 </head>
 <body>
  Click <a href="#" onclick="return window.redirect();">here</a> if you're not redirected ...
  <script language="javascript"></p>

<pre><code>window.redirect = function() {
  window.location = '/#!' + window.location.hash.substring(1)
  return false;
}
window.redirect();
</code></pre>

<p>  </script>
 </body>
</html>
```</p>

<p>You can also do this inside a controller with a view or layout. Start by trapping the URL in your <code>ApplicationController</code>.</p>

<p><code>ruby app/controllers/application_controller.rb
if request.env['PATH_INFO'] == '/!'
  render layout: "bang_hash"
  return
end
</code></p>

<p>The layout can have the piece of JavaScript that redirects to the corresponding hash-bang URL.</p>

<p>``` ruby app/views/layouts/bang_hash.html.haml
!!!
- ie_tag(:html) do
  %body</p>

<pre><code>:javascript
  window.location = '/#!' + window.location.hash.substring(1)
</code></pre>

<p>```</p>

<p>You can try this on <a href="http://artsy.net/!#/log_in" target="_blank">http://artsy.net/!#/log_in</a>. Watch it flip the bang-hash into a hash-bang and redirect to our login page. The redirect page could also be a good place to put an easter egg ;)</p>
]]></content>
  </entry>
  
</feed>
