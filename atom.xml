<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Artsy Engineering]]></title>
  <link href="http://artsy.github.com/atom.xml" rel="self"/>
  <link href="http://artsy.github.com/"/>
  <updated>2013-02-09T13:44:12-05:00</updated>
  <id>http://artsy.github.com/</id>
  <author>
    <name><![CDATA[Artsy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Data Corruption and Concurrent Updates to Embedded Objects with MongoDB]]></title>
    <link href="http://artsy.github.com/blog/2013/02/09/data-corruption-and-concurrent-updates-to-embedded-objects-with-mongoid/"/>
    <updated>2013-02-09T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2013/02/09/data-corruption-and-concurrent-updates-to-embedded-objects-with-mongoid</id>
    <content type="html"><![CDATA[<p>We use <a href="http://www.mongodb.org/">MongoDB</a> at Artsy as our primary data store via the <a href="http://mongoid.org/">Mongoid ODM</a>. Eventually, we started noticing data corruption inside embedded objects at an alarming rate of 2-3 records a day. The number of occurrences increased rapidly with load as our user growth accelerated.</p>

<p>The root cause was not a HN-worthy sensational declaration about how MongoDB trashes data, but our lack of understanding of what can and cannot be concurrently written to the database, neatly hidden behind the object data mapping layer.</p>

<!-- more -->


<h3>Data Model</h3>

<p>Consider the following artwork model with embedded images.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Artwork</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">embeds_many</span> <span class="ss">:images</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">Image</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="n">embedded_in</span> <span class="ss">:artwork</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:filename</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:width</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:height</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">Integer</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Let&#8217;s create a few objects and examine the database queries executed when constructing this relationship by setting a <code>DEBUG</code> logger level on the Moped driver used underneath the ODM.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Moped</span><span class="o">.</span><span class="n">logger</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="vg">$stdout</span><span class="p">)</span>
</span><span class='line'><span class="no">Moped</span><span class="o">.</span><span class="n">logger</span><span class="o">.</span><span class="n">level</span> <span class="o">=</span> <span class="no">Logger</span><span class="o">::</span><span class="no">DEBUG</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># db.artworks.insert({ </span>
</span><span class='line'><span class="c1">#   _id: ObjectId(&quot;510f22c5db8e540aab000001&quot;), </span>
</span><span class='line'><span class="c1">#   title: &quot;Mona Lisa&quot; </span>
</span><span class='line'><span class="c1"># })</span>
</span><span class='line'><span class="n">artwork</span> <span class="o">=</span> <span class="no">Artwork</span><span class="o">.</span><span class="n">create!</span><span class="p">(</span><span class="n">title</span><span class="p">:</span> <span class="s2">&quot;Mona Lisa&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">image1</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="s2">&quot;framed.jpg&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># db.artworks.update(</span>
</span><span class='line'><span class="c1">#   { _id: ObjectId(&quot;510f22c5db8e540aab000001&quot;) },</span>
</span><span class='line'><span class="c1">#   { $push : </span>
</span><span class='line'><span class="c1">#     { images: </span>
</span><span class='line'><span class="c1">#       { </span>
</span><span class='line'><span class="c1">#         _id: ObjectId(&quot;510f22c5db8e540aab000002&quot;), </span>
</span><span class='line'><span class="c1">#         filename: &quot;framed.jpg&quot; </span>
</span><span class='line'><span class="c1">#       }</span>
</span><span class='line'><span class="c1">#     }</span>
</span><span class='line'><span class="c1">#   }</span>
</span><span class='line'><span class="c1"># )</span>
</span><span class='line'><span class="n">artwork</span><span class="o">.</span><span class="n">images</span> <span class="o">&lt;&lt;</span> <span class="n">image1</span>
</span><span class='line'>
</span><span class='line'><span class="n">image2</span> <span class="o">=</span> <span class="no">Image</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">filename</span><span class="p">:</span> <span class="s2">&quot;unframed.jpg&quot;</span><span class="p">)</span>
</span><span class='line'><span class="c1"># db.artworks.update(</span>
</span><span class='line'><span class="c1">#   { _id: ObjectId(&quot;510f22c5db8e540aab000001&quot;) },</span>
</span><span class='line'><span class="c1">#   { $push : </span>
</span><span class='line'><span class="c1">#     { images: </span>
</span><span class='line'><span class="c1">#       { </span>
</span><span class='line'><span class="c1">#         _id: ObjectId(&quot;510f22c5db8e540aab000003&quot;), </span>
</span><span class='line'><span class="c1">#         filename: &quot;unframed.jpg&quot; </span>
</span><span class='line'><span class="c1">#       }</span>
</span><span class='line'><span class="c1">#     }</span>
</span><span class='line'><span class="c1">#   }</span>
</span><span class='line'><span class="c1"># )</span>
</span><span class='line'><span class="n">artwork</span><span class="o">.</span><span class="n">images</span> <span class="o">&lt;&lt;</span> <span class="n">image2</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here&#8217;s the artwork data in MongoDB retrieved from a <code>mongo</code> shell:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">findOne</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000001&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;title&quot;</span> <span class="p">:</span> <span class="s2">&quot;Mona Lisa&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;images&quot;</span> <span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000002&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;filename&quot;</span> <span class="p">:</span> <span class="s2">&quot;framed.jpg&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000003&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;filename&quot;</span> <span class="p">:</span> <span class="s2">&quot;unframed.jpg&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We can modify the attributes of the second image.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db.artworks.update(</span>
</span><span class='line'><span class="c1">#   { _id: ObjectId(&quot;510f22c5db8e540aab000001&quot;) }, </span>
</span><span class='line'><span class="c1">#   { $set : { &quot;images.1.width&quot; : 30, &quot;images.1.height&quot; : 40 } }</span>
</span><span class='line'><span class="c1"># )</span>
</span><span class='line'><span class="n">image2</span><span class="o">.</span><span class="n">update_attributes!</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">40</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>The image has been updated correctly.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">findOne</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000001&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;title&quot;</span> <span class="p">:</span> <span class="s2">&quot;Mona Lisa&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;images&quot;</span> <span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000002&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;filename&quot;</span> <span class="p">:</span> <span class="s2">&quot;framed.jpg&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000003&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;filename&quot;</span> <span class="p">:</span> <span class="s2">&quot;unframed.jpg&quot;</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;height&quot;</span> <span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;width&quot;</span> <span class="p">:</span> <span class="mi">30</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Incomplete Record Corruption</h3>

<p>Examining the query you will notice that it uses a so-called &#8220;positional&#8221; operator, <code>images.1.width</code> to update the second record. Imagine what would happen if the first record was deleted from another process immediately before the update. That&#8217;s right, the update will be performed on a record that doesn&#8217;t exist, in which case the default MongoDB behavior is to create it!</p>

<p>We can simulate this by loading the object in Ruby, pulling the first record directly from the database and then performing the update.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artwork</span><span class="o">.</span><span class="n">images</span> <span class="o">&lt;&lt;</span> <span class="n">image2</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># pull the first artwork directly from the database</span>
</span><span class='line'><span class="no">Artwork</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">_id</span><span class="p">:</span> <span class="n">artwork</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;$pull&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;images&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">_id</span><span class="p">:</span> <span class="n">image1</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">image2</span><span class="o">.</span><span class="n">update_attributes!</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">40</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This yields a nasty surprise. We now have two records in the embedded collection, the second one missing an <code>_id</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">findOne</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000001&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;title&quot;</span> <span class="p">:</span> <span class="s2">&quot;Mona Lisa&quot;</span><span class="p">,</span>
</span><span class='line'>  <span class="s2">&quot;images&quot;</span> <span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000003&quot;</span><span class="p">),</span>
</span><span class='line'>      <span class="s2">&quot;filename&quot;</span> <span class="p">:</span> <span class="s2">&quot;unframed.jpg&quot;</span>
</span><span class='line'>    <span class="p">},</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;height&quot;</span> <span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;width&quot;</span> <span class="p">:</span> <span class="mi">30</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When reloaded, Mongoid will assign an automatic <code>_id</code> to the second object, the correct height and width, but no filename.</p>

<h3>Null Record Corruption</h3>

<p>A similar scenario can play out by pulling both image records out of the embedded collection and making a positional update. This will create a <code>null</code> record, which is much worse, because Mongoid can&#8217;t even destroy it, attempting to pull a record with an <code>_id</code> that does not exist.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">artwork</span><span class="o">.</span><span class="n">images</span> <span class="o">&lt;&lt;</span> <span class="n">image2</span>
</span><span class='line'>
</span><span class='line'><span class="no">Artwork</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">_id</span><span class="p">:</span> <span class="n">artwork</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;$pull&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;images&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">_id</span><span class="p">:</span> <span class="n">image1</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'><span class="no">Artwork</span><span class="o">.</span><span class="n">collection</span><span class="o">.</span><span class="n">where</span><span class="p">(</span><span class="n">_id</span><span class="p">:</span> <span class="n">artwork</span><span class="o">.</span><span class="n">id</span><span class="p">)</span><span class="o">.</span><span class="n">update</span><span class="p">(</span>
</span><span class='line'>  <span class="s2">&quot;$pull&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="s2">&quot;images&quot;</span> <span class="o">=&gt;</span> <span class="p">{</span> <span class="n">_id</span><span class="p">:</span> <span class="n">image2</span><span class="o">.</span><span class="n">id</span> <span class="p">}</span> <span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="n">image2</span><span class="o">.</span><span class="n">update_attributes!</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">40</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">&gt;</span> <span class="n">db</span><span class="o">.</span><span class="n">artworks</span><span class="o">.</span><span class="n">findOne</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="s2">&quot;_id&quot;</span> <span class="p">:</span> <span class="no">ObjectId</span><span class="p">(</span><span class="s2">&quot;510f22c5db8e540aab000001&quot;</span><span class="p">),</span>
</span><span class='line'>  <span class="s2">&quot;title&quot;</span> <span class="p">:</span> <span class="s2">&quot;Mona Lisa&quot;</span>
</span><span class='line'>  <span class="s2">&quot;images&quot;</span> <span class="p">:</span> <span class="o">[</span>
</span><span class='line'>    <span class="n">null</span><span class="p">,</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="s2">&quot;height&quot;</span> <span class="p">:</span> <span class="mi">40</span><span class="p">,</span>
</span><span class='line'>      <span class="s2">&quot;width&quot;</span> <span class="p">:</span> <span class="mi">30</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Solutions</h3>

<p>A first obvious solution is not to use embedded objects or to never modify them. Both <code>$push</code> and <code>$pull</code> are atomic operations, but not the positional update.</p>

<p>A general solution to this problem is to make all update operations transactional. You can take a lock on the parent model by using <a href="https://github.com/afeld/mongoid-locker">mongoid-locker</a>. It works, but can be quite tedious depending on the complexity of your application.</p>

<p>Finally, MongoDB supports something called a &#8220;positional operator&#8221; for embedded objects. This means you can atomically update a record found by its embedded object&#8217;s field using a reference to the position of that embedded object. This solves our problem, as long as the object is not embedded below the first level. Mongoid 3.1 (currently HEAD) implements this behavior by default (see <a href="https://github.com/mongoid/mongoid/issues/2545">#2545</a> for details), adjusting the selector to look for the embedded object&#8217;s <code>_id</code> and replacing the position with a <code>$</code> positional operator.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># db.artworks.update(</span>
</span><span class='line'><span class="c1">#   { </span>
</span><span class='line'><span class="c1">#     _id: ObjectId(&quot;510f22c5db8e540aab000001&quot;), </span>
</span><span class='line'><span class="c1">#     &quot;images._id&quot; : ObjectId(&quot;510f22c5db8e540aab000003&quot;) </span>
</span><span class='line'><span class="c1">#   }, </span>
</span><span class='line'><span class="c1">#   { $set : { &quot;images.$.width&quot; : 30, &quot;images.$.height&quot; : 40 }}</span>
</span><span class='line'><span class="c1"># )</span>
</span><span class='line'><span class="n">image2</span><span class="o">.</span><span class="n">update_attributes!</span><span class="p">(</span><span class="n">width</span><span class="p">:</span> <span class="mi">30</span><span class="p">,</span> <span class="n">height</span><span class="p">:</span> <span class="mi">40</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We&#8217;ve been successfully running this in production for a few weeks now, without any more data corruption issues.</p>

<p>While this is a huge step forward, covering all of our application&#8217;s scenarios, we would like complete native support for atomic updates inside MongoDB at all levels of nesting. Please add your +1 to <a href="https://jira.mongodb.org/browse/SERVER-831">SERVER-831</a>.</p>

<h3>Links</h3>

<ul>
<li><a href="https://gist.github.com/dblock/4699070">Code to Detect Corrupt Embedded Objects</a></li>
<li><a href="https://jira.mongodb.org/browse/SERVER-831">MongoDB SERVER-831: Positional Operator Matching Nested Arrays</a></li>
<li><a href="https://github.com/mongoid/mongoid/issues/2545">Mongoid #2545: Use $ Positional Operator for Updating Embedded Documents</a></li>
<li><a href="https://github.com/dblock/mongoid/tree/master-issues/spec/dblock">Repro Specs for Mongoid #2545 and Similar</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Master the Heroku CLI with Heroku Commander]]></title>
    <link href="http://artsy.github.com/blog/2013/02/01/master-heroku-command-line-with-heroku-commander/"/>
    <updated>2013-02-01T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2013/02/01/master-heroku-command-line-with-heroku-commander</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.com/images/2013-02-01-master-heroku-command-line-with-heroku-commander/heroku-commander.png"></p>

<p>Heroku users frequently run the <strong>heroku</strong> command-line tool that ships with the <a href="https://toolbelt.heroku.com/">Heroku Toolbelt</a>. It has two very convenient features: it will remember API credentials and default to the &#8220;heroku&#8221; GIT remote to figure out the application to connect to. Neither of these features are available in the Heroku client API, so it&#8217;s not unusual to find developers invoke the Heroku CLI from Rake tasks and other automation scripts.</p>

<p>There&#8217;re several problems with using the Heroku CLI for automation:</p>

<ol>
<li>The exit code from <code>heroku run</code> is not the exit code from the process being run on Heroku. See <a href="https://github.com/heroku/heroku/issues/186">#186</a>.</li>
<li>Gathering console output from <code>heroku run:detached</code> requires an external <code>heroku logs --tail</code> process that will never finish.</li>
</ol>


<p>The <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> gem wraps execution of the Heroku CLI to overcome these common limitations.</p>

<!-- more -->


<h3>Heroku Configuration</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="c1"># a hash of all settings for your default heroku app</span>
</span><span class='line'><span class="n">commander</span><span class="o">.</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice that unlike <code>Heroku::Client.new</code>, this doesn&#8217;t require your e-mail or API key. It will invoke <code>heroku config -s</code>.</p>

<p>You can specify an application name, too.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="o">.</span><span class="n">new</span><span class="p">({</span> <span class="ss">:app</span> <span class="o">=&gt;</span> <span class="s2">&quot;heroku-commander&quot;</span> <span class="p">})</span>
</span><span class='line'><span class="c1"># a hash of all settings for the heroku-commander application</span>
</span><span class='line'><span class="n">commander</span><span class="o">.</span><span class="n">config</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Run Commands on Heroku</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="c1"># returns all output lines</span>
</span><span class='line'><span class="c1"># eg. [ &quot;Linux 2.6.32-348-ec2 #54-Ubuntu SMP x86_64 GNU&quot; ]</span>
</span><span class='line'><span class="n">commander</span><span class="o">.</span><span class="n">run</span> <span class="s2">&quot;uname -a&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This calls <code>(heroku run 2&gt;&amp;1 uname -a; echo rc=\\$?)</code>, parses output for the final exit code line and raises an exception if the run&#8217;s result code wasn&#8217;t zero. In other words, if the command fails, an error is raised, which makes this suitable for Rake tasks.</p>

<p>You can also read output line-by-line.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">commander</span><span class="o">.</span><span class="n">run</span> <span class="s2">&quot;ls -1&quot;</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># each line from the output of ls -1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Detach Commands on Heroku</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">commander</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'><span class="n">commander</span><span class="o">.</span><span class="n">run</span><span class="p">(</span><span class="s2">&quot;ls -R&quot;</span><span class="p">,</span> <span class="p">{</span> <span class="ss">:detached</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="p">})</span> <span class="k">do</span> <span class="o">|</span><span class="n">line</span><span class="o">|</span>
</span><span class='line'>  <span class="c1"># each line from the output of ls -r -1</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This calls <code>(heroku detached:run ls -r -1 2&gt;&amp;1; echo rc=\\$?)</code>, parses the output for a Heroku process ID, spawns a <code>heroku logs --tail -p pid</code> and monitors the log output until it reports process completion. It will also parse output for the final exit code and raise an exception if the run&#8217;s result code wasn&#8217;t zero.</p>

<h3>More Examples</h3>

<p>There&#8217;re more working examples <a href="https://github.com/dblock/heroku-commander/tree/master/examples">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Create MongoDB Command-Lines from Mongoid Configuration]]></title>
    <link href="http://artsy.github.com/blog/2013/01/31/create-mongodb-command-lines-with-mongo/"/>
    <updated>2013-01-31T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2013/01/31/create-mongodb-command-lines-with-mongo</id>
    <content type="html"><![CDATA[<p>We use MongoDB as our primary store and have built a healthy amount of automation around various database instances and operational environments. For example, we backup databases to S3 using <code>mongodump</code>, mirror data between instances with <code>mongorestore</code> and often need to open a MongoDB shell with <code>mongo</code> to examine data at the lowest level.</p>

<p>Generating MongoDB command-lines is tedious and error-prone. Introducing a new gem called <a href="https://github.com/dblock/mongoid-shell">mongoid-shell</a> to help with this. The library can generate command-lines for various MongoDB shell tools from your Mongoid configuration.</p>

<p>For example, connect to your production MongoDB instance from a <code>db:production:shell</code> Rake task.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span>
</span><span class='line'>  <span class="n">namespace</span> <span class="ss">:production</span>
</span><span class='line'>    <span class="n">task</span> <span class="ss">:shell</span>
</span><span class='line'>      <span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="s2">&quot;mongoid.yml&quot;</span><span class="p">,</span> <span class="ss">:production</span>
</span><span class='line'>      <span class="nb">system</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<p>Commands can be created for the current default session or you can pass a session as an argument to a new command.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># will use Mongoid.default_session</span>
</span><span class='line'><span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongodump</span><span class="o">.</span><span class="n">new</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># use a hand-crafted session</span>
</span><span class='line'><span class="n">s</span> <span class="o">=</span> <span class="no">Moped</span><span class="o">::</span><span class="no">Session</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="o">[</span> <span class="s2">&quot;127.0.0.1:27017&quot;</span> <span class="o">]</span><span class="p">)</span>
</span><span class='line'><span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongodump</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">session</span><span class="p">:</span> <span class="n">s</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Commands accept parameters. Here&#8217;s how to backup <code>my_database</code> to <code>/tmp/db_backup</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">out</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Dir</span><span class="o">.</span><span class="n">tmpdir</span><span class="p">,</span> <span class="s1">&#39;db_backup&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">db</span> <span class="o">=</span> <span class="s1">&#39;my_database&#39;</span>
</span><span class='line'><span class="n">dump</span> <span class="o">=</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongodump</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">db</span><span class="p">:</span> <span class="n">db</span><span class="p">,</span> <span class="n">out</span><span class="p">:</span> <span class="n">out</span><span class="p">)</span>
</span><span class='line'><span class="c1"># mongodump --db my_database --out /tmp/db_backup</span>
</span><span class='line'><span class="nb">system</span> <span class="n">dump</span><span class="o">.</span><span class="n">to_s</span>
</span></code></pre></td></tr></table></div></figure>


<p>The mongoid-shell gem currently supports <code>mongo</code>, <code>mongodump</code>, <code>mongorestore</code> and <code>mongostat</code> and various MongoDB configurations, including replica-sets.</p>

<p>Please note that we don&#8217;t recommend you store passwords for production environments in your <code>mongoid.yml</code>. At Artsy, we set all sensitive values directly on our Heroku instances with <code>heroku config:add</code> and use <a href="https://github.com/dblock/heroku-commander">heroku-commander</a> to retrieve these settings in rake. We also have a bit of convention in our application name, such as &#8220;app-staging&#8221; and &#8220;app-production&#8221;.</p>

<p>Here&#8217;s a complete Rake task that dynamically fetches Heroku configuration and opens a MongoDB shell on a production or staging environment.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">namespace</span> <span class="ss">:db</span> <span class="k">do</span>
</span><span class='line'>  <span class="o">[</span> <span class="ss">:staging</span><span class="p">,</span> <span class="ss">:production</span> <span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">env</span><span class="o">|</span>
</span><span class='line'>    <span class="n">namespace</span> <span class="n">env</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">task</span> <span class="ss">:shell</span> <span class="k">do</span>
</span><span class='line'>        <span class="n">app</span> <span class="o">=</span> <span class="s2">&quot;myapp-</span><span class="si">#{</span><span class="n">env</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>        <span class="n">config</span> <span class="o">=</span> <span class="no">Heroku</span><span class="o">::</span><span class="no">Commander</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="n">app</span><span class="p">:</span> <span class="n">app</span><span class="p">)</span><span class="o">.</span><span class="n">config</span>
</span><span class='line'>        <span class="n">config</span><span class="o">.</span><span class="n">each_pair</span> <span class="k">do</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span>
</span><span class='line'>          <span class="no">ENV</span><span class="o">[</span><span class="n">k</span><span class="o">]</span> <span class="o">=</span> <span class="n">v</span>
</span><span class='line'>        <span class="k">end</span>
</span><span class='line'>        <span class="n">mongoid_yml</span> <span class="o">=</span> <span class="no">File</span><span class="o">.</span><span class="n">join</span><span class="p">(</span><span class="no">Rails</span><span class="o">.</span><span class="n">root</span><span class="p">,</span> <span class="s2">&quot;config/mongoid.yml&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="no">Mongoid</span><span class="o">.</span><span class="n">load!</span> <span class="n">mongoid_yml</span><span class="p">,</span> <span class="n">env</span>
</span><span class='line'>        <span class="nb">system</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Shell</span><span class="o">::</span><span class="no">Commands</span><span class="o">::</span><span class="no">Mongo</span><span class="o">.</span><span class="n">new</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>      <span class="k">end</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Run <code>rake db:staging:shell</code> or <code>rake db:production:shell</code>, which works as long as you have access to the Heroku app itself. A bonus feature is that the mongoid-shell gem will automatically connect to the primary node of a replica-set.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="err">$</span> <span class="n">rake</span> <span class="n">db</span><span class="ss">:staging:shell</span>
</span><span class='line'> <span class="n">mongo</span> <span class="n">db</span><span class="p">:</span><span class="mi">10007</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">staging</span> <span class="o">--</span><span class="n">username</span> <span class="n">user</span> <span class="o">--</span><span class="n">password</span> <span class="o">************</span>
</span><span class='line'> <span class="no">MongoDB</span> <span class="n">shell</span> <span class="n">version</span><span class="p">:</span> <span class="mi">2</span><span class="o">.</span><span class="mi">0</span><span class="o">.</span><span class="mi">7</span>
</span><span class='line'> <span class="n">connecting</span> <span class="n">to</span><span class="p">:</span> <span class="n">db</span><span class="p">:</span><span class="mi">10007</span><span class="o">/</span><span class="n">app</span><span class="o">-</span><span class="n">staging</span>
</span><span class='line'> <span class="o">&gt;</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Improving Performance of Mongoid-Cached-Json]]></title>
    <link href="http://artsy.github.com/blog/2013/01/20/improving-performance-of-mongoid-cached-json/"/>
    <updated>2013-01-20T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2013/01/20/improving-performance-of-mongoid-cached-json</id>
    <content type="html"><![CDATA[<p>Last year, we have open-sourced and made extensive use of two Ruby libraries in our API: <a href="https://github.com/dblock/mongoid-cached-json">mongoid-cached-json</a> and <a href="https://github.com/artsy/garner">garner</a>. Both transform the procedural nightmare of caching and JSON generation into a declarative and easily manageable DSL. It was worth the investment, since our service spends half of its time generating JSON and reading from and writing to Memcached.</p>

<p>Today we&#8217;ve released mongoid-cached-json 1.4 with two interesting performance improvements.</p>

<!-- more -->


<h2>Bulk Reference Resolving with a Local Cache</h2>

<p>Consider an array of database model instances, each with numerous references to other objects. It&#8217;s typical to see such instances reference the same object: for example we have an <code>Artwork</code> that references an <code>Artist</code>. It&#8217;s common to see multiple artworks reference the same artist in a collection. Retrieving the artist from cache every time it is referenced is clearly inefficient.</p>

<p><code>Mongoid::CachedJson</code> will now collect all JSON references, then resolve them after suppressing duplicates, in-place within the JSON tree. This significantly reduces the number of cache queries.</p>

<p>Note, that while this optimization reduces load on the Memcached servers, there&#8217;s a cost of doing additional work after collecting the entire JSON in Ruby.</p>

<h2>Fetching Cache Data in Bulk</h2>

<p>Various cache stores, including Memcached, support bulk read operations. The <a href="https://github.com/mperham/dalli">Dalli</a> gem, which we use in production, exposes this via the <code>read_multi</code> method. With the bulk reference optimization above we now have the entire list of keys to query from cache, at once. <code>Mongoid::CachedJson</code> will always invoke <code>read_multi</code> where available, which significantly reduces the number of network roundtrips to the cache servers.</p>

<p>This is a good example of where declarative models and DSLs have tremendous advantages in enabling massive improvements across the board. Imagine making the <code>read_multi</code> optimization in hundreds of API endpoints!</p>

<h2>Benchmarks</h2>

<p>With the above optimizations the library does more work in order to make less roundtrips to Memcached over the network. Since the network is often the slowest part in any large scale system, the overall production performance should be better as long as we can obtain similar throughput in ideal network conditions on localhost. We&#8217;ve added some common case benchmarks in <a href="https://github.com/dblock/mongoid-cached-json/blob/master/spec/benchmark_spec.rb">spec/benchmark_spec.rb</a> and ran them against 1.2.3 and 1.4.0 to obtain <a href="https://gist.github.com/4583039">these results</a>. The overall performance gain averaged 14.6%, which is quite significant. With real world data in a production environment we&#8217;re seeing 15-50% less time spent in Memcached, depending on the API.</p>

<h2>Links</h2>

<p>The concepts behind these improvements should be attributed to <a href="https://github.com/aaw">@aaw</a> and <a href="https://github.com/macreery">@macreery</a>. If you want to learn more about the above-mentioned libraries, check out the following links:</p>

<ul>
<li><a href="http://confreaks.com/videos/986-goruco2012-from-zero-to-api-cache-w-grape-mongodb-in-10-minutes">From Zero to API-Cache w/ Grape and MongoDB</a>, video recorded at GoRuCo</li>
<li><a href="http://artsy.github.com/blog/2012/02/20/caching-model-json-with-mongoid-cached-json/">Caching Model JSON with Mongoid-Cached-Json</a></li>
<li><a href="http://artsy.github.com/blog/2012/03/23/simplifying-model-level-json-versioning-with-mongoid-cached-json/">Simplifying Model Level Versioning with Mongoid-Cched-Json</a></li>
<li><a href="http://artsy.github.com/blog/2012/05/30/restful-api-caching-with-garner/">RESTful API Caching with Garner</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging Bundler Issues on Heroku]]></title>
    <link href="http://artsy.github.com/blog/2013/01/15/debugging-bundler-issues-with-heroku/"/>
    <updated>2013-01-15T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2013/01/15/debugging-bundler-issues-with-heroku</id>
    <content type="html"><![CDATA[<p>A few days ago we have started seeing the Heroku deployments of one of our applications randomly hang during <code>bundle install</code>. The problem worsened with time and we were not able to do a deployment for days.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ git push -f git@heroku.com:application.git FETCH_HEAD:master
</span><span class='line'>-----&gt; Deleting 12 files matching .slugignore patterns.
</span><span class='line'>-----&gt; Ruby/Rails app detected
</span><span class='line'>-----&gt; Using Ruby version: ruby-1.9.3
</span><span class='line'>-----&gt; Installing dependencies using Bundler version 1.3.0.pre.5
</span><span class='line'>       Running: bundle install --without development:test --path vendor/bundle --binstubs vendor/bundle/bin
</span><span class='line'>       Fetching gem metadata from http://rubygems.org/.......
</span><span class='line'>       Fetching gem metadata from http://rubygems.org/..
</span><span class='line'>/app/slug-compiler/lib/utils.rb:66:in `block (2 levels) in spawn': command='/app/slug-compiler/lib/../../tmp/buildpacks/ruby/bin/compile /tmp/build_1p6071sni4hh1 /app/tmp/repo.git/.cache' exit_status=0 out='' at=timeout elapsed=900.1056394577026 (Utils::TimeoutError)
</span><span class='line'>  from /app/slug-compiler/lib/utils.rb:52:in `loop'
</span><span class='line'>  from /app/slug-compiler/lib/utils.rb:52:in `block in spawn'
</span><span class='line'>  from /app/slug-compiler/lib/utils.rb:47:in `popen'
</span><span class='line'>  from /app/slug-compiler/lib/utils.rb:47:in `spawn'
</span><span class='line'>  from /app/slug-compiler/lib/buildpack.rb:37:in `block in compile'
</span><span class='line'>  from /app/slug-compiler/lib/buildpack.rb:35:in `fork'
</span><span class='line'>  from /app/slug-compiler/lib/buildpack.rb:35:in `compile'
</span><span class='line'>  from /app/slug-compiler/lib/slug.rb:497:in `block in run_buildpack'
</span><span class='line'> !     Heroku push rejected, failed to compile Ruby/rails app</span></code></pre></td></tr></table></div></figure>


<p>Seeing bundler hang on &#8220;Fetching gem metadata from http://rubygems.org/&#8221;, my immediate reaction was to blame the RubyGems Dependency API for its poor performance and attempt the <a href="http://hone.herokuapp.com/bundler%20heroku/2012/10/22/rubygems-and-the-dependency-api.html">recommended workaround</a> of switching to <em>http://bundler-api.herokuapp.com</em>. That didn&#8217;t work.</p>

<p>I also tried to reproduce the issue on a local environment, including a (what I thought was) a completely clean machine at no avail. My <code>bundle install</code> would always succeed.</p>

<p>Finally, everything pointed at an infrastructure problem with Heroku itself, so I opened a ticket (#72648), <a href="https://twitter.com/dblockdotorg/status/290221530892365824">tweeted</a> endlessly to Heroku devs, pinged a  contact at Heroku on Skype and generally annoyed people for 5 straight days. It was a frustrating problem and I was getting no useful help.</p>

<p>Fast forward, this turned out to be <a href="https://github.com/carlhuda/bundler/issues/2248">an issue in Bundler</a>. Narrowing it down would have been relatively easy if I had known where to look.</p>

<p>I hope this post helps you with similar issues.</p>

<!-- more -->


<h2>Heroku Slug Compiler</h2>

<p>Heroku provides small Ubuntu virtual machines on-demand, called &#8220;dynos&#8221;, that look very much like any other Linux box. You can <code>heroku run bash</code> and examine the file system of a running dyno. You can delete the bundler cache, rerun <code>bundle install</code>, etc. But deployment does not happen in a running dyno - every time you push to Heroku, deployment happens inside a compiler dyno. Heroku attaches the dyno to your slug filesystem (your code), which may include a cache from previous runs. It then executes the code inside <a href="https://github.com/heroku/heroku-buildpack-ruby">heroku-buildpack-ruby</a>, specifically <a href="https://github.com/heroku/heroku-buildpack-ruby/blob/5dbf4c06c765dc832c073fe5be9360533fd1846d/lib/language_pack/ruby.rb#L49">this method</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">compile</span>
</span><span class='line'>  <span class="no">Dir</span><span class="o">.</span><span class="n">chdir</span><span class="p">(</span><span class="n">build_path</span><span class="p">)</span>
</span><span class='line'>  <span class="n">remove_vendor_bundle</span>
</span><span class='line'>  <span class="n">install_ruby</span>
</span><span class='line'>  <span class="n">install_jvm</span>
</span><span class='line'>  <span class="n">setup_language_pack_environment</span>
</span><span class='line'>  <span class="n">setup_profiled</span>
</span><span class='line'>  <span class="n">allow_git</span> <span class="k">do</span>
</span><span class='line'>    <span class="n">install_language_pack_gems</span>
</span><span class='line'>    <span class="n">build_bundler</span>
</span><span class='line'>    <span class="n">create_database_yml</span>
</span><span class='line'>    <span class="n">install_binaries</span>
</span><span class='line'>    <span class="n">run_assets_precompile_rake_task</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>A lot of these functions invoke <code>IO.open</code> and transmit <code>$stdout</code> and <code>$stderr</code> back to you. You see everything Heroku sees and while you cannot get access to the compiler dyno, there&#8217;s really no mystery to this process. Heroku slug compiler will timeout after 15 minutes and produce a stack with <code>Utils::TimeoutError</code>. And everything Heroku does should be reproducible locally.</p>

<h2>Troubleshooting Bundler</h2>

<p>The key to getting a repro of my issue locally was to use the <a href="https://github.com/carlhuda/bundler/blob/master/ISSUES.md">Bundler Troubleshooting</a> section. I had previously missed one of the steps in cleaning the local Bundler cache.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># remove user-specific gems and git repos</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">~</span><span class="sr">/.bundle/</span> <span class="o">~</span><span class="sr">/.gem/</span><span class="n">bundler</span><span class="o">/</span> <span class="o">~</span><span class="sr">/.gems/</span><span class="n">cache</span><span class="o">/</span><span class="n">bundler</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># remove system-wide git repos and git checkouts</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="vg">$GEM_HOME</span><span class="o">/</span><span class="n">bundler</span><span class="o">/</span> <span class="vg">$GEM_HOME</span><span class="o">/</span><span class="n">cache</span><span class="o">/</span><span class="n">bundler</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># remove project-specific settings and git repos</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="o">.</span><span class="n">bundle</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># remove project-specific cached .gem files</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="n">vendor</span><span class="o">/</span><span class="n">cache</span><span class="o">/</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># remove the saved resolve of the Gemfile</span>
</span><span class='line'><span class="n">rm</span> <span class="o">-</span><span class="n">rf</span> <span class="no">Gemfile</span><span class="o">.</span><span class="n">lock</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># uninstall the rubygems-bundler and open_gem gems</span>
</span><span class='line'><span class="n">rvm</span> <span class="n">gemset</span> <span class="n">use</span> <span class="n">global</span> <span class="c1"># if using rvm</span>
</span><span class='line'><span class="n">gem</span> <span class="n">uninstall</span> <span class="n">rubygems</span><span class="o">-</span><span class="n">bundler</span> <span class="n">open_gem</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># try to install one more time</span>
</span><span class='line'><span class="n">bundle</span> <span class="n">install</span>
</span></code></pre></td></tr></table></div></figure>


<p>This hung with my Gemfile the same way as on Heroku.</p>

<h2>Bundler Dependency Resolver</h2>

<p>So what is bundler doing?</p>

<p>Bundler runs the gem dependency resolver, which is described in detail in <a href="http://patshaughnessy.net/2011/9/24/how-does-bundler-bundle">Pat Shaughnessy&#8217;s blog post</a>. The post suggests running <code>DEBUG_RESOLVER=1 bundle install</code>, which produced a mountain of output that isn&#8217;t very helpful.</p>

<p>I made a <a href="https://github.com/carlhuda/bundler/pull/2249">pull request</a> with a similar setting called <code>DEBUG_RESOLVER_TREE</code>, which reduces the output to the gems being resolved. This helped me narrow down a <a href="https://github.com/carlhuda/bundler/issues/2248">small repro</a>. I was also able to make some sense of what bundler was doing: backtracking in an attempt to find a combination of gems matching the versions declared in <code>Gemfile</code> for every combinations of <code>railties</code>, <code>actionmailer</code>, <code>activeresource</code>, <code>activerecord</code>, <code>actionpack</code> and <code>builder</code> above version 3.2, only to fail to find a compatible version of <code>builder</code> every single time. That&#8217;s a lot of versions to try.</p>

<p>Adding an entry for <code>builder</code> to <code>Gemfile</code> fixed the issue.</p>

<p>Similar issues to my <a href="https://github.com/carlhuda/bundler/issues/2248">#2248</a> in Bundler have been reported in <a href="https://github.com/carlhuda/bundler/issues/2030">#2030</a>, <a href="https://github.com/carlhuda/bundler/issues/2090">#2090</a> and <a href="https://github.com/carlhuda/bundler/issues/2125">#2125</a>.</p>

<h2>Troubleshooting Tip</h2>

<p>If you remember anything from this post, next time you have a hang inside <code>bundle install</code> on or off Heroku, start with <a href="https://github.com/carlhuda/bundler/blob/master/ISSUES.md">Bundler Troubleshooting</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beat Heroku's 60 Seconds Application Boot Timeout with a Proxy]]></title>
    <link href="http://artsy.github.com/blog/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/"/>
    <updated>2012-12-13T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/12/13/beat-heroku-60-seconds-application-boot-timeout-with-a-proxy</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.com/images/2012-12-13-beat-heroku-60-seconds-application-boot-timeout-with-a-proxy/heroku-logo-light-234x60.png"></p>

<p>Heroku will log an <a href="https://devcenter.heroku.com/articles/error-codes#r10-boot-timeout">R10 - Boot Timeout</a> error when a web process takes longer than 60 seconds to bind to its assigned port. This error is often caused by a process being unable to reach an external resource, such as a database or because you have a lot of gems in your <code>Gemfile</code> which take a long time to load.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Dec 12 12:12:12 prod heroku/web.1:
</span><span class='line'>  Error R10 (Boot timeout)
</span><span class='line'>  Web process failed to bind to $PORT within 60 seconds of launch</span></code></pre></td></tr></table></div></figure>


<p>There&#8217;s currently no way to increase this boot timeout, but we can beat it with a proxy implemented by our new <a href="https://github.com/dblock/heroku-forward">heroku-forward</a> gem.</p>

<!-- more -->


<p>The concepts for <code>heroku-forward</code> come from <a href="http://noverloop.be/beating-herokus-60s-boot-times-with-the-cedar-stack-and-a-reverse-proxy/">this article</a> by Nicolas Overloop. The basic idea is to have a proxy bind to the port immediately and then buffer requests until the backend came up. The proxy implementation is Ilya Grigorik&#8217;s <a href="https://github.com/igrigorik/em-proxy">em-proxy</a>. Communication between the proxy and the backend happens over a unix domain socket (a file), which needed a bit of work (see <a href="https://github.com/igrigorik/em-proxy/pull/31">#31</a>), inspired by an excellent article, <a href="http://jgwmaxwell.com/fighting-the-unicorns-becoming-a-thin-wizard-on-heroku">Fighting the Unicorns: Becoming a Thin Wizard on Heroku</a> by JGW Maxwell. The <code>heroku-forward</code> gem connects all the dots.</p>

<p>Check out the gem&#8217;s <a href="https://github.com/dblock/heroku-forward/blob/master/README.md">README</a> for how to set it up.</p>

<p>Here&#8217;s the log output from an application that uses this gem. Notice that Heroku reports the state of <code>web.1</code> up after just 4 seconds, while the application takes 67 seconds to boot.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>2012-12-11T23:33:42+00:00 heroku[web.1]: Starting process with command `bundle exec ruby config.ru`
</span><span class='line'>2012-12-11T23:33:46+00:00 app[web.1]:  INFO -- : Launching Backend ...
</span><span class='line'>2012-12-11T23:33:46+00:00 app[web.1]:  INFO -- : Launching Proxy Server at 0.0.0.0:42017 ...
</span><span class='line'>2012-12-11T23:33:46+00:00 app[web.1]: DEBUG -- : Attempting to connect to /tmp/thin20121211-2-1bfazzx.
</span><span class='line'>2012-12-11T23:33:46+00:00 app[web.1]:  WARN -- : no connection, 10 retries left.
</span><span class='line'>2012-12-11T23:33:46+00:00 heroku[web.1]: State changed from starting to up
</span><span class='line'>2012-12-11T23:34:32+00:00 app[web.1]: &gt;&gt; Thin web server (v1.5.0 codename Knife)
</span><span class='line'>2012-12-11T23:34:32+00:00 app[web.1]: &gt;&gt; Maximum connections set to 1024
</span><span class='line'>2012-12-11T23:34:32+00:00 app[web.1]: &gt;&gt; Listening on /tmp/thin20121211-2-1bfazzx, CTRL+C to stop
</span><span class='line'>2012-12-11T23:34:53+00:00 app[web.1]: DEBUG -- : Attempting to connect to /tmp/thin20121211-2-1bfazzx.
</span><span class='line'>2012-12-11T23:34:53+00:00 app[web.1]: DEBUG -- : Proxy Server ready at 0.0.0.0:42017 (67s).</span></code></pre></td></tr></table></div></figure>


<p>You can read more about how we use Heroku at <a href="http://success.heroku.com/artsy">http://success.heroku.com/artsy</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Measuring Performance in Grape APIs with NewRelic RPM]]></title>
    <link href="http://artsy.github.com/blog/2012/11/29/measuring-performance-in-grape-apis-with-new-relic/"/>
    <updated>2012-11-29T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/11/29/measuring-performance-in-grape-apis-with-new-relic</id>
    <content type="html"><![CDATA[<p>Knowing how well your API performs in real time is essential to any successful project. That&#8217;s because you can&#8217;t fix what you can&#8217;t measure.</p>

<p>We use and heavily contribute to <a href="http://github.com/intridea/grape">Grape</a>, a Ruby API DSL. Grape is a Rack middleware and we have been reporting API performance data to <a href="http://newrelic.com/">NewRelic</a> with code from <a href="http://code.dblock.org/new-relic-performance-instrumentation-with-grape-api">my older blog post</a>.</p>

<p>It&#8217;s time to improve the reporting implementation and address performance monitoring in both development and production environments. Here&#8217;s what a single API request breakdown is going to look like.</p>

<p><img src="http://artsy.github.com/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/transaction-detail.png"></p>

<!-- more -->


<h2>NewRelic RPM</h2>

<p>The first step is to add the <code>newrelic_rpm</code> gem to Gemfile, which implements the actual realtime performance reporting to NewRelic. We also use <a href="https://github.com/mongoid/mongoid">Mongoid</a> and the <a href="https://github.com/mongoid/moped">Moped</a> MongoDB Ruby driver, which can be instrumented with <code>newrelic_moped</code>.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;newrelic_moped&quot;</span><span class="p">,</span> <span class="s2">&quot;0.0.3&quot;</span>
</span><span class='line'><span class="n">gem</span> <span class="s2">&quot;newrelic_rpm&quot;</span><span class="p">,</span> <span class="s2">&quot;3.3.3&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>You will need <code>config/newrelic.yml</code> in your application. Ours can be found in <a href="https://gist.github.com/4170458">this gist</a> and works well both locally and on Heroku.</p>

<h2>Instrumenting Grape</h2>

<p>In the past we used <a href="https://gist.github.com/1233422">NewRelic::Agent::Instrumentation::API</a>, which works for any generic Rack middleware. This would report all API calls to NewRelic, but would treat requests to <em>/api/artist/andy-warhol</em> and <em>/api/artist/wassily-kandinsky</em> as unrelated. That is because the instrumenter is a Rack middleware that wraps Grape requests <em>before</em> they reach Grape. The only information available is the request URL, and not the actual API route that is going to be matched when the request is processed.</p>

<p>We want both requests to <em>/api/artist/andy-warhol</em> and <em>/api/artist/wassily-kandinsky</em> to be treated as <em>/api/artist/:id</em>. Lets insert a middleware inside Grape itself, once the URL has been matched to a route.</p>

<figure class='code'><figcaption><span>api.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">API</span> <span class="o">&lt;&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="n">use</span> <span class="no">ApiNewRelicInstrumenter</span>
</span><span class='line'>  <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The new instrumenter has access to the current API endpoint via <code>env['api.endpoint']</code> and reports data via NewRelic&#8217;s <code>ControllerInstrumentation</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">ApiNewRelicInstrumenter</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">Middleware</span><span class="o">::</span><span class="no">Base</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">NewRelic</span><span class="o">::</span><span class="no">Agent</span><span class="o">::</span><span class="no">Instrumentation</span><span class="o">::</span><span class="no">ControllerInstrumentation</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">call</span><span class="p">(</span><span class="n">env</span><span class="p">)</span>
</span><span class='line'>    <span class="n">trace_options</span> <span class="o">=</span> <span class="p">{</span>
</span><span class='line'>      <span class="n">category</span><span class="p">:</span> <span class="ss">:rack</span><span class="p">,</span>
</span><span class='line'>      <span class="n">path</span><span class="p">:</span> <span class="n">env</span><span class="o">[</span><span class="s1">&#39;api.endpoint&#39;</span><span class="o">].</span><span class="n">routes</span><span class="o">.</span><span class="n">first</span><span class="o">.</span><span class="n">route_path</span><span class="p">,</span>
</span><span class='line'>      <span class="n">request</span><span class="p">:</span> <span class="n">request</span><span class="p">,</span>
</span><span class='line'>      <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">perform_action_with_newrelic_trace</span><span class="p">(</span><span class="n">trace_options</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'>      <span class="k">yield</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code for <code>ApiNewRelicInstrumenter</code> can be found in <a href="https://gist.github.com/4170469">this gist</a>. It supports enabling and disabling performance reporting by setting <code>NEW_RELIC_ID</code> and works around NewRelic&#8217;s method name limitations (these cannot contain slashes).</p>

<h2>Development Environment</h2>

<p>You can now see NewRelic performance data in development mode, too. If you mount Grape inside Rails run <code>NEW_RELIC_ID=foo rails s</code>. Navigate to <em>http://localhost:3000/newrelic</em> to see your local traces.</p>

<p><img src="http://artsy.github.com/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/developer-mode.png"></p>

<p>Drill into an individual request to find several detailed breakdowns of how time was spent, including specific MongoDB queries (under &#8220;SQL&#8221;, naturally).</p>

<p><img src="http://artsy.github.com/images/2012-11-29-measuring-performance-in-grape-apis-with-new-relic/sql-detail.png"></p>

<p>NewRelic is a commercial product, but you can run development mode for free! Note that enabling this will triple your local Rails boot time: we enable development mode by setting <code>development_mode: &lt;%= !!ENV['NEW_RELIC_ID'] %&gt;</code> in <a href="https://gist.github.com/4170458">newrelic.rpm</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Friendly URLs with Mongoid::Slug]]></title>
    <link href="http://artsy.github.com/blog/2012/11/22/friendly-urls-with-mongoid-slug/"/>
    <updated>2012-11-22T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/11/22/friendly-urls-with-mongoid-slug</id>
    <content type="html"><![CDATA[<p>All Artsy URLs shared publicly are humanly readable. For example, you&#8217;ll find all Barbara Kruger&#8217;s works at <a href="http://artsy.net/artist/barbara-kruger">artsy.net/artist/barbara-kruger</a> and a post by Hyperallergic entitled &#8220;Superfluous Men Can&#8217;t Get No Satisfaction&#8221; at <a href="http://artsy.net/hyperallergic/post/superfluous-men-cant-get-no-satisfaction">artsy.net/hyperallergic/post/superfluous-men-cant-get-no-satisfaction</a>. This is a lot prettier than having <code>id=42</code> in the browser&#8217;s address and is a big improvement for SEO.</p>

<p><img src="http://artsy.github.com/images/2012-11-22-friendly-urls-with-mongoid-slug/barbara-kruger.png"></p>

<p>We construct these URLs with a gem called <a href="https://github.com/digitalplaywright/mongoid-slug">mongoid_slug</a>. Interesting implementation details under the cut.</p>

<!-- more -->


<h2>Mongoid-Slug Basics</h2>

<p>Include the gem in Gemfile.</p>

<figure class='code'><figcaption><span>Gemfile</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">gem</span> <span class="s2">&quot;mongoid_slug&quot;</span><span class="p">,</span> <span class="s2">&quot;~&gt; 2.0.1&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The basic functionality of mongoid-slug is achieved by adding the <code>Mongoid::Slug</code> a mixin and declaring a slug.</p>

<figure class='code'><figcaption><span>post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Post</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Slug</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">belongs_to</span> <span class="ss">:author</span><span class="p">,</span> <span class="n">class_name</span><span class="p">:</span> <span class="s2">&quot;User&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="nb">String</span>
</span><span class='line'>  <span class="n">slug</span> <span class="ss">:title</span><span class="p">,</span> <span class="n">history</span><span class="p">:</span> <span class="kp">true</span><span class="p">,</span> <span class="n">scope</span><span class="p">:</span> <span class="ss">:author</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:published</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">Boolean</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This adds a <code>_slugs</code> field of type <code>Array</code> into the <code>Post</code> model. Every time the title of the post changes, a new slug is generated and, depending on the value of the <code>history</code> option, either replaces the existing slug or appends the new slug to the array of slugs. A database index ensures that these are unique: two posts of the same title will have different slugs, such as &#8220;post-1&#8221; and &#8220;post-2&#8221;. Our example is also scoped to the author of the post.</p>

<p>You can now find this post by <code>_id</code> or <code>slug</code> with the same <code>find</code> method. And with <code>history: true</code>, you can find a document by any of its older slugs!</p>

<figure class='code'><figcaption><span>post.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># find by ID</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;47cc67093475061e3d95369d&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># find by slug</span>
</span><span class='line'><span class="n">user</span><span class="o">.</span><span class="n">posts</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="s2">&quot;superfluous-men-cant-get-no-satisfaction&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Mongoid-slug is smart enough to figure out whether you&#8217;re querying by a <code>Moped::BSON::ObjectId</code> or a slug. Performance-wise the lookup by slug is cheap: mongoid_slug ensures an index on <code>_slugs</code>. This all works, of course, because MongoDB builds a B-tree index atop all elements in each <code>_slugs</code> array.</p>

<p>The <code>find</code> method will naturally respect Mongoid&#8217;s <code>raise_not_found_error</code> option and either raise <code>Mongoid::Errors::DocumentNotFound</code> or return <code>nil</code> in the case the document cannot be found.</p>

<h2>Avoiding Too Many Slugs</h2>

<p>Users writing posts may want to edit them many times before they are published. This can potentially create a large number of unnecessary slugs. We&#8217;ve used a simple trick to generate slugs only after a post has been published by defaulting the slug of an unpublished post to its <code>_id</code>. Mongoid-slug will append <code>-1</code> to such slugs, so we monkey-patch <code>Mongoid::Slug::UniqueSlug</code> with the code in <a href="https://gist.github.com/4131766">this gist</a>. Special care must be taken not to destroy a slug of a post that has been published earlier, then unpublished.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">slug</span> <span class="ss">:title</span><span class="p">,</span> <span class="ss">:published</span><span class="p">,</span> <span class="n">scope</span><span class="p">:</span> <span class="ss">:author</span><span class="p">,</span> <span class="n">history</span><span class="p">:</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="nb">p</span><span class="o">|</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">p</span><span class="o">.</span><span class="n">published?</span> <span class="o">||</span> <span class="nb">p</span><span class="o">.</span><span class="n">has_slug?</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'>  <span class="k">else</span>
</span><span class='line'>    <span class="nb">p</span><span class="o">.</span><span class="n">id</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">has_slug?</span>
</span><span class='line'>  <span class="o">!</span> <span class="n">slug</span><span class="o">.</span><span class="n">blank?</span> <span class="o">&amp;&amp;</span> <span class="n">slug</span> <span class="o">!=</span> <span class="nb">id</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parameters to <code>slug</code> include all fields that may cause the slug to change. When a post is published by setting <code>published</code> to <code>true</code>, the slug will be re-generated with a call to <code>build_slug</code> as long as the <code>published</code> field is included in that list.</p>

<p>Please note an interesting discussion about allowing model ids in the <code>_slugs</code> <a href="https://github.com/digitalplaywright/mongoid-slug/pull/91">here</a>.</p>

<h2>Caching by Slug</h2>

<p>Because slugs can now change, but lookups by old slugs should hit the cache, caching by slug makes cache invalidation difficult. A two-layered cache that maps slugs to ids and then caches objects by id can solve this at the expense of an additional cache lookup. We have yet to implement this in <a href="https://github.com/artsy/garner">Garner</a>, see <a href="https://github.com/artsy/garner/issues/13">#13</a>.</p>

<h2>International Slugs</h2>

<p>We have a large international audience with names and posts in all kinds of languages. An escaped UTF-8 URL would be much worse than a BSON ObjectId. Fortunately, mongoid-slug uses <a href="https://github.com/rsl/stringex">stringex</a> under the hood. This gem defines <code>to_url</code> and rewrites special symbols and transliterates strings from many languages into English. Here&#8217;re some examples of generated slugs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="s2">&quot;ITCZ 1 (21°17ʼ51.78”N / 89°35ʼ28.18”O / 26-04-08 / 09:00 am)&quot;</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'><span class="c1"># =&gt; itcz-1-21-degrees-17-51-dot-78-n-slash-89-degrees-35-28-dot-18-o-slash-26-04-08-slash-09-00-am</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;“水／火”系列 No.8&quot;</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'><span class="c1"># =&gt; &quot;shui-slash-huo-xi-lie-no-dot-8&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&quot;трактат по теории этики&quot;</span><span class="o">.</span><span class="n">to_url</span>
</span><span class='line'><span class="c1"># =&gt; &quot;traktat-po-tieorii-etiki&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Pretty amazing!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Monitor 503s and Timeout Requests on Heroku]]></title>
    <link href="http://artsy.github.com/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku/"/>
    <updated>2012-11-15T21:21:00-05:00</updated>
    <id>http://artsy.github.com/blog/2012/11/15/how-to-monitor-503s-and-timeout-on-heroku</id>
    <content type="html"><![CDATA[<p>We have recently started hitting an unusually high number of &#8220;503: Service Unavailable&#8221; errors with one of our applications on Heroku. What are these? How can we monitor their quantity and frequency? What&#8217;s the fix?</p>

<p><img src="http://artsy.github.com/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-error.png"></p>

<!-- more -->


<h2>What does 503 mean?</h2>

<p>A 503 error means &#8220;Service Unavailable&#8221;. Heroku returns a 503 error when an HTTP request times out between the Heroku routing mesh and your application, including when the application failed to boot. This timeout limit is set to 30 seconds, as <a href="https://devcenter.heroku.com/articles/request-timeout">documented by Heroku</a>, and shows up in the logs as follows.</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Nov 14 12:10:50 production heroku/router:
</span><span class='line'> Error H12 (Request timeout) -&gt; GET artsy.net/api/spline
</span><span class='line'> dyno=web.11 queue= wait= service=30000ms status=503 bytes=0</span></code></pre></td></tr></table></div></figure>


<p>This usually means that the application could not process the request fast enough, and in very rare cases, that there&#8217;s an infrastructure problem with Heroku itself. A 504 error which means &#8220;Gateway Timeout&#8221; would have probably been a more appropriate choice. Either way, the root cause could be something as simple as trying to run a very long database query or do too much work that doesn&#8217;t fit in a 30 seconds window. It could also involve an external service that didn&#8217;t respond quickly enough. Your mileage may vary.</p>

<h2>Monitoring 503s</h2>

<p>503 errors don&#8217;t happen within your application, they are reported by the routing mesh. They will not appear in internal monitoring systems attached to your app, including <a href="http://newrelic.com/">NewRelic</a>.</p>

<p>We get the frequency of 503s by sending our Heroku logs to <a href="https://papertrailapp.com/">Papertrail</a> and using their <a href="http://help.papertrailapp.com/kb/how-it-works/alerts">alerts feature</a> to push the number of 503s to <a href="http://www.geckoboard.com/">Geckoboard</a>. You can send these to <a href="http://graphite.wikidot.com/">Graphite</a> or any other monitoring system in the same manner.</p>

<p>This is what it looks like:</p>

<p><img src="http://artsy.github.com/images/2012-11-15-how-to-monitor-503s-and-timeout-on-heroku/503-geckoboard.png"></p>

<h2>Aborting Requests</h2>

<p>When Heroku reports a 503 status code, it just gives up. Your application continues executing the request though, often to completion, which may take forever. In the meantime, Heroku will send a new request to the dyno that&#8217;s still busy, and get a new 503. This is known as a &#8220;stuck&#8221; dyno.</p>

<p>To prevent dynos from being stuck you must abort the request within the 30 second period. This can be accomplished with the <a href="https://github.com/kch/rack-timeout">rack-timeout</a> gem and setting <code>Rack::Timeout.timeout = 29</code> in an initializer (or a smaller value within which you want to guarantee a response). The gem automatically inserts itself into a Rails application, but you will need to manually mount it in other Rack apps, such as those using <a href="https://github.com/intridea/grape">Grape</a>.</p>

<figure class='code'><figcaption><span>api.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Api</span> <span class="o">&lt;</span> <span class="no">Grape</span><span class="o">::</span><span class="no">API</span>
</span><span class='line'>  <span class="n">use</span> <span class="no">Rack</span><span class="o">::</span><span class="no">Timeout</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">desc</span> <span class="s2">&quot;Returns a reticulated spline.&quot;</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;spline/:id&quot;</span>
</span><span class='line'>    <span class="no">Spline</span><span class="o">.</span><span class="n">find</span><span class="p">(</span><span class="n">params</span><span class="o">[</span><span class="ss">:id</span><span class="o">]</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Because your application is now getting a timeout exception, you can also report it in NewRelic. The following works in Grape.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">rescue_from</span> <span class="no">Timeout</span><span class="o">::</span><span class="no">Error</span><span class="p">,</span> <span class="ss">:backtrace</span> <span class="o">=&gt;</span> <span class="kp">true</span> <span class="k">do</span> <span class="o">|</span><span class="n">e</span><span class="o">|</span>
</span><span class='line'>  <span class="no">NewRelic</span><span class="o">::</span><span class="no">Agent</span><span class="o">.</span><span class="n">instance</span><span class="o">.</span><span class="n">error_collector</span><span class="o">.</span><span class="n">notice_error</span> <span class="n">e</span><span class="p">,</span>
</span><span class='line'>    <span class="n">uri</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">path</span><span class="p">,</span>
</span><span class='line'>    <span class="n">referer</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">referer</span><span class="p">,</span>
</span><span class='line'>    <span class="n">request_params</span><span class="p">:</span> <span class="n">request</span><span class="o">.</span><span class="n">params</span>
</span><span class='line'>  <span class="n">rack_response</span><span class="p">({</span>
</span><span class='line'>    <span class="ss">:type</span> <span class="o">=&gt;</span> <span class="s2">&quot;timeout_error&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="ss">:message</span> <span class="o">=&gt;</span> <span class="s2">&quot;The request timed out.&quot;</span>
</span><span class='line'>  <span class="p">}</span><span class="o">.</span><span class="n">to_json</span><span class="p">,</span> <span class="mi">503</span><span class="p">)</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Don&#8217;t forget to write a test!</p>

<figure class='code'><figcaption><span>api_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">describe</span> <span class="no">Api</span> <span class="k">do</span>
</span><span class='line'>  <span class="n">it</span> <span class="s2">&quot;times out after Rack::Timeout.timeout&quot;</span> <span class="k">do</span>
</span><span class='line'>    <span class="no">Rack</span><span class="o">::</span><span class="no">Timeout</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:timeout</span><span class="p">)</span><span class="o">.</span><span class="n">and_return</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="no">Spline</span><span class="o">.</span><span class="n">stub</span><span class="p">(</span><span class="ss">:find</span><span class="p">)</span> <span class="p">{</span> <span class="nb">sleep</span> <span class="mi">3</span> <span class="p">}</span>
</span><span class='line'>    <span class="n">get</span> <span class="s2">&quot;/spline/1&quot;</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">status</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="mi">503</span>
</span><span class='line'>    <span class="n">response</span><span class="o">.</span><span class="n">body</span><span class="o">.</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;{&quot;type&quot;:&quot;timeout_error&quot;,&quot;message&quot;:&quot;The request timed out.&quot;}&#39;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Fixing Timeouts</h2>

<p>The root causes of timeouts are specific to your application. Our general approach for long running requests is to offload the request processing into a delayed job or background process and &#8220;cook&#8221; data in a way that makes it readily available to API endpoints. You can read more about this and related aspects of our system architecture in <a href="http://artsy.github.com/blog/2012/10/10/artsy-technology-stack/">this earlier blog post</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The perils of iOS user agent strings]]></title>
    <link href="http://artsy.github.com/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing/"/>
    <updated>2012-10-18T15:19:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/18/the-perils-of-ios-user-agent-sniffing</id>
    <content type="html"><![CDATA[<p>There is a great deal of misinformation on the web about detecting an
iPad or an iPhone in JavaScript. The
<a href="http://stackoverflow.com/a/4617648">top answer on stackoverflow</a> -
and many <a href="http://www.sitepoint.com/identify-apple-iphone-ipod-ipad-visitors/">blog posts</a> using <a href="http://www.askdavetaylor.com/detect_apple_iphone_user_web_site_server.html">this technique</a> - are all incorrect.</p>

<p>The conventional wisdom is that iOS devices have a user agent for
Safari and a user agent for the UIWebView. This assumption is
incorrect as iOS apps can and do
<a href="http://stackoverflow.com/a/8666438">customize their user agent</a>. The
main offender here is Facebook, whose iOS app alone accounts for about
1-3% of Artsy&#8217;s daily traffic.</p>

<p>Compare these user agent strings from iOS devices:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># iOS Safari
</span><span class='line'>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9B176 Safari/7534.48.3
</span><span class='line'>iPhone: Mozilla/5.0 (iPhone; CPU iPhone OS 5_0 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Version/5.1 Mobile/9A334 Safari/7534.48.3
</span><span class='line'>
</span><span class='line'># UIWebView
</span><span class='line'>iPad: Mozilla/5.0 (iPad; CPU OS 5_1 like Mac OS X) AppleWebKit/534.46 (KHTML, like Gecko) Mobile/98176
</span><span class='line'>iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_1 like Mac OS X; en-us) AppleWebKit/532.9 (KHTML, like Gecko) Mobile/8B117
</span><span class='line'>
</span><span class='line'># Facebook UIWebView
</span><span class='line'>iPad: Mozilla/5.0 (iPad; U; CPU iPhone OS 5_1_1 like Mac OS X; en_US) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1.1;FBBV/4110.0;FBDV/iPad2,1;FBMD/iPad;FBSN/iPhone OS;FBSV/5.1.1;FBSS/1; FBCR/;FBID/tablet;FBLC/en_US;FBSF/1.0]
</span><span class='line'>iPhone: Mozilla/5.0 (iPhone; U; CPU iPhone OS 5_1_1 like Mac OS X; ru_RU) AppleWebKit (KHTML, like Gecko) Mobile [FBAN/FBForIPhone;FBAV/4.1;FBBV/4100.0;FBDV/iPhone3,1;FBMD/iPhone;FBSN/iPhone OS;FBSV/5.1.1;FBSS/2; tablet;FBLC/en_US]</span></code></pre></td></tr></table></div></figure>


<p></p>

<!-- more -->


<p>The old way to identify iPhone / iPad in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">IS_IPAD</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPad/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="nx">IS_IPHONE</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPhone/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPod/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you were to go with this approach for detecting iPhone and iPad,
you would end up with IS_IPHONE <em>and</em> IS_IPAD both being true if a user
comes from Facebook on an iPad. That could create some odd behavior!</p>

<p>The correct way to identify iPhone / iPad in JavaScript:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">IS_IPAD</span> <span class="o">=</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPad/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">;</span>
</span><span class='line'><span class="nx">IS_IPHONE</span> <span class="o">=</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPhone/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">)</span> <span class="o">||</span> <span class="p">(</span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">match</span><span class="p">(</span><span class="sr">/iPod/i</span><span class="p">)</span> <span class="o">!=</span> <span class="kc">null</span><span class="p">);</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span><span class="nx">IS_IPAD</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">IS_IPHONE</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We simply declare <code>IS_IPHONE</code> to be <code>false</code> on iPads to cover for the
bizarre Facebook UIWebView iPad user agent. This is one example of how
<em>user agent sniffing is unreliable</em>. The more iOS apps that customize
their user agent, the more issues user agent sniffing will have. If
you can avoid user agent sniffing (hint: CSS Media Queries), DO
IT.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[So you want to do a CSS3 3D transform?]]></title>
    <link href="http://artsy.github.com/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform/"/>
    <updated>2012-10-18T00:00:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/18/so-you-want-to-do-a-css3-3d-transform</id>
    <content type="html"><![CDATA[<p>This post details the first of many challenges we faced in 3D
transforming the <a href="http://artsy.net">homepage of Artsy</a> (inspired by
<a href="https://github.com/hakimel/meny">Meny</a>): detecting CSS 3D transform
support.</p>

<p>Front-end development is messy in today&#8217;s fragmented world. At Artsy,
our goal is to do what it takes to provide an incredible experience
for <em>all</em> of our users (IE8+, iOS and the usual suspects). Deploying
bleeding edge tech, like CSS 3D transforms, is an exercise in
compromising principals for practicality &#8211; and managing these
&#8220;compromises&#8221; in well-documented code.</p>

<p>We looked to <a href="http://modernizr.com/">Modernizr&#8217;s</a> feature detection approach to provide us with
a reliable way to detect CSS3 3D transform support across browsers. They have some
<a href="https://github.com/Modernizr/Modernizr/issues/590">well</a>-
<a href="https://github.com/Modernizr/Modernizr/issues/465">documented</a>
<a href="https://github.com/Modernizr/Modernizr/issues/240">struggles</a> around
the issue. After flipping most of the tables in the office ┻━┻ ︵ヽ
(`Д´)ﾉ︵﻿ ┻━┻ , we settled on user agent sniffing as the most robust
method for detecting CSS3 3D transform support. But why did none
of the available methods work for us?</p>

<!-- more -->


<p>CSS3 3D transforms involve interaction between the browser and the
graphics card. The browser may be able to parse the 3D declarations
but may not be able to properly instruct the graphics card in how to
render your page. There are many possible outcomes ranging from the
page rendering with lines across it (Safari 4) to the page rendering
beautifully then crashing the browser seconds later (Safari on
iOS4). Any &#8216;feature detection&#8217; approach would unacceptably flag these
as &#8216;supports CSS3 3D transforms&#8217;. This is one case where &#8216;feature
detection&#8217; fails and user agent sniffing (and lots of testing) wins
hands down.</p>

<p>Most feature detection assumes a &#8220;supports&#8221; or &#8220;does not support&#8221;
binary. This is not the case with CSS3 3D transforms &#8211; there is a
&#8220;gradient of support&#8221;. Additionally, enabling 3D transforms causes the
page to be re-rendered in an entirely different rendering engine which
then causes other problems (more on this in a later post).</p>

<p>CSS3 3D transform support can be separated into 4 levels:</p>

<ol>
<li>Reliably supports 3D transforms across most machines. For example:
Safari 6.</li>
<li>Can parse and apply 3D transform declarations but ignores the 3D
parts. For example: Chrome on a Retina MacBook Pro.</li>
<li>Can parse and apply 3D transform declarations but renders in
unacceptable ways. For example: Safari 4 and Safari 4/5 on Windows
show lines across the page.</li>
<li>Cannot apply 3D transform declarations in any way. For example:
IE or Firefox &lt; v10.</li>
</ol>


<p>Here are a few popular ways of detecting CSS3 3D transform support and why
they don&#8217;t work for us:</p>

<p><em>Meny / Hakim&#8217;s method</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># apply these styles to the body in css then see if they are applied in JS</span>
</span><span class='line'><span class="nv">docStyle = </span><span class="nb">document</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">style</span>
</span><span class='line'><span class="nv">supports3DTransforms = </span> <span class="s1">&#39;WebkitPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;MozPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;msPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;OPerspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span> <span class="o">or</span>
</span><span class='line'>                        <span class="s1">&#39;perspective&#39;</span> <span class="k">in</span> <span class="nx">docStyle</span>
</span></code></pre></td></tr></table></div></figure>


<p>This works best and is straightforward code. The only
issue is that it throws a positive for iOS4 causing the browser to
crash and a positive for Safari on Windows and Safari 4 OSX which both
display a grid over the page when using the 3D renderer.</p>

<p><em>iScroll4 method</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">has3D = </span><span class="o">-&gt;</span> <span class="s1">&#39;WebKitCSSMatrix&#39;</span> <span class="k">in</span> <span class="nb">window</span> <span class="o">&amp;&amp;</span> <span class="s1">&#39;m11&#39;</span> <span class="k">in</span> <span class="k">new</span> <span class="nx">WebKitCSSMatrix</span><span class="p">()</span>
</span></code></pre></td></tr></table></div></figure>


<p>This only works reliably Safari in our testing.</p>

<p><em>Modernizer method</em></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nv">ret = </span><span class="o">!!</span><span class="nx">testPropsAll</span><span class="p">(</span><span class="s1">&#39;perspective&#39;</span><span class="p">)</span>
</span><span class='line'><span class="k">if</span> <span class="p">(</span> <span class="nx">ret</span> <span class="o">and</span> <span class="s1">&#39;webkitPerspective&#39;</span> <span class="k">in</span> <span class="nx">docElement</span><span class="p">.</span><span class="nx">style</span> <span class="p">)</span>
</span><span class='line'>  <span class="c1"># create a dib and see if it moves</span>
</span><span class='line'>  <span class="nx">injectElementWithStyles</span><span class="p">(</span><span class="s1">&#39;@media (transform-3D), (-webkit-transform-3D){#modernizr{left:9px;position:absolute;height:3px;}}&#39;</span><span class="p">,</span> <span class="nf">(node, rule) -&gt;</span>
</span><span class='line'>    <span class="nv">ret = </span><span class="nx">node</span><span class="p">.</span><span class="nx">offsetLeft</span> <span class="o">===</span> <span class="mi">9</span> <span class="o">&amp;&amp;</span> <span class="nx">node</span><span class="p">.</span><span class="nx">offsetHeight</span> <span class="o">===</span> <span class="mi">3</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This creates a div, transforms it, and then checks if it&#8217;s position
has changed as expected. It only works in reliably in Safari.
It <a href="https://github.com/Modernizr/Modernizr/issues/590">sometimes works in Chrome</a>
but throws a false positive in the case of Chrome on Retina MacBook
Pro as the element does move &#8211; just not in 3D space.</p>

<p><em>User Agent method</em></p>

<p>We want to maintain wide support of new tech while ensuring all users
have a great experience. Modernizr and the feature detection group
have their heart in the right place and do a great job most of the
time. That said, user agent sniffing is the only way to handle the
complex support scenarios inherent in bleeding edge CSS3 tech such as
3D transforms.</p>

<p>Here is our method/hack for identifying browsers that support CSS3 3D
transforms well:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="p">(</span><span class="o">-&gt;</span>
</span><span class='line'>  <span class="nv">docElement = </span><span class="nb">document</span><span class="p">.</span><span class="nx">documentElement</span>
</span><span class='line'>  <span class="nv">uagent = </span><span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">toLowerCase</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">browsers = </span><span class="p">[</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;webkit&#39;</span><span class="p">,</span>  <span class="mi">530</span><span class="p">]</span>        <span class="c1"># not well supported in Safari 4, Safari 5 webkit version is 530.17</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;chrome&#39;</span><span class="p">,</span>  <span class="mi">12</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;mozilla&#39;</span><span class="p">,</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;opera&#39;</span><span class="p">,</span>   <span class="kc">Infinity</span><span class="p">]</span>   <span class="c1"># not supported</span>
</span><span class='line'>    <span class="p">[</span><span class="s1">&#39;msie&#39;</span><span class="p">,</span>    <span class="kc">Infinity</span><span class="p">]</span> <span class="p">]</span> <span class="c1"># not supported</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># From: http://api.jquery.com/jQuery.browser</span>
</span><span class='line'>  <span class="nv">uaMatch = </span><span class="nf">(ua) -&gt;</span>
</span><span class='line'>    <span class="nv">match =</span>
</span><span class='line'>      <span class="sr">/(chrome)[ \/]([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="sr">/(webkit)[ \/]([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="sr">/(opera)(?:.*version|)[ \/]([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="sr">/(msie) ([\w.]+)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span><span class="nx">ua</span><span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="nx">ua</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s2">&quot;compatible&quot;</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span> <span class="o">and</span> <span class="sr">/(mozilla)(?:.*? rv:([\w.]+)|)/</span><span class="p">.</span><span class="nx">exec</span><span class="p">(</span> <span class="nx">ua</span> <span class="p">)</span> <span class="o">or</span>
</span><span class='line'>      <span class="p">[]</span>
</span><span class='line'>    <span class="p">{</span> <span class="nv">browser: </span><span class="p">(</span><span class="nx">match</span><span class="p">[</span> <span class="mi">1</span> <span class="p">]</span> <span class="o">or</span> <span class="s2">&quot;&quot;</span><span class="p">),</span> <span class="nv">version: </span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">?</span><span class="p">.</span><span class="nx">split</span><span class="p">(</span><span class="s1">&#39;.&#39;</span><span class="p">)[</span><span class="mi">0</span><span class="p">]</span> <span class="o">or</span> <span class="mi">0</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">addNo3DTransform = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">docElement.className = </span><span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">replace</span> <span class="s1">&#39;csstransforms3D&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; no-csstransforms3D&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">add3DTransform = </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nv">docElement.className = </span><span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span><span class="p">.</span><span class="nx">replace</span> <span class="s1">&#39;no-csstransforms3D&#39;</span><span class="p">,</span> <span class="s1">&#39;&#39;</span>
</span><span class='line'>    <span class="nx">docElement</span><span class="p">.</span><span class="nx">className</span> <span class="o">+=</span> <span class="s1">&#39; csstransforms3D&#39;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># default to no CSS3 3D transform support</span>
</span><span class='line'>  <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">match = </span><span class="nx">uaMatch</span> <span class="nx">uagent</span>
</span><span class='line'>  <span class="k">for</span> <span class="nx">browser</span> <span class="k">in</span> <span class="nx">browsers</span>
</span><span class='line'>    <span class="k">if</span> <span class="nx">browser</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">==</span> <span class="nx">match</span><span class="p">.</span><span class="nx">browser</span>
</span><span class='line'>      <span class="k">if</span> <span class="nx">match</span><span class="p">.</span><span class="nx">version</span> <span class="o">&gt;=</span> <span class="nx">browser</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
</span><span class='line'>        <span class="nx">add3DTransform</span><span class="p">()</span>
</span><span class='line'>      <span class="k">else</span>
</span><span class='line'>        <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>      <span class="k">break</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">IS_IPHONE = </span><span class="nx">uagent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;iphone&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">or</span> <span class="nx">uagent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;ipod&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">IS_IPAD = </span><span class="nx">uagent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;ipad&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>  <span class="nv">IS_IOS = </span><span class="nx">IS_IPHONE</span> <span class="o">or</span> <span class="nx">IS_IPAD</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># iOS 6 is our support cut off for iPad</span>
</span><span class='line'>  <span class="nv">match = </span><span class="sr">/\os ([0-9]+)/</span><span class="p">.</span><span class="nx">exec</span> <span class="nx">uagent</span>
</span><span class='line'>  <span class="nv">IS_LT_IOS6 = </span><span class="nx">match</span> <span class="o">and</span> <span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="o">and</span> <span class="nb">Number</span><span class="p">(</span><span class="nx">match</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="o">&lt;</span> <span class="mi">6</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># 3D transforms are supported but do not work well on iPhone</span>
</span><span class='line'>  <span class="k">if</span> <span class="nx">IS_IPHONE</span>
</span><span class='line'>    <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># disable 3D transform for older versions of Safari on iPad</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="nx">IS_IPAD</span> <span class="o">and</span> <span class="nx">IS_LT_IOS6</span>
</span><span class='line'>    <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># deactivate 3D transform for Safari on Windows</span>
</span><span class='line'>  <span class="k">else</span> <span class="k">if</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;Safari&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span> <span class="o">and</span> <span class="nx">navigator</span><span class="p">.</span><span class="nx">userAgent</span><span class="p">.</span><span class="nx">search</span><span class="p">(</span><span class="s1">&#39;Windows&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="nx">addNo3DTransform</span><span class="p">()</span>
</span><span class='line'><span class="p">)()</span>
</span></code></pre></td></tr></table></div></figure>


<p>If you would like to take issue with or improve this code please check
it out <a href="https://github.com/zamiang/detect-css3-3D-transform">on Github</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Artsy's Technology Stack]]></title>
    <link href="http://artsy.github.com/blog/2012/10/10/artsy-technology-stack/"/>
    <updated>2012-10-10T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/10/artsy-technology-stack</id>
    <content type="html"><![CDATA[<p>The public launch of Artsy via the <a href="http://www.nytimes.com/2012/10/09/arts/design/artsy-is-mapping-the-world-of-art-on-the-web.html">New York Times</a> is a good opportunity to describe our current technology stack.</p>

<p>What you see when you go to <a href="http://artsy.net">Artsy</a> is a website built with <a href="http://backbonejs.org/">Backbone.js</a> and written in <a href="http://coffeescript.org/">CoffeeScript</a>. It renders JSON data from <a href="http://rubyonrails.org/">Ruby on Rails</a>, <a href="https://github.com/intridea/grape">Ruby Grape</a> and <a href="http://nodejs.org/">Node.js</a> services. Text search is powered by <a href="http://lucene.apache.org/solr/">Apache Solr</a>. We also have an <a href="https://developer.apple.com/devcenter/ios/index.action">iOS</a> application that talks to the same back-end Ruby API. We run all our web processes on <a href="http://www.heroku.com/">Heroku</a> and all job queues on <a href="http://aws.amazon.com/">Amazon EC2</a>. Our data store is <a href="http://www.mongodb.org/">MongoDB</a>, operated by <a href="https://mongohq.com/">MongoHQ</a> and we have some <a href="http://redis.io/">Redis</a> instances. Our assets, including images, are served from <a href="http://aws.amazon.com/s3/">Amazon S3</a> via the <a href="http://aws.amazon.com/cloudfront/">CloudFront CDN</a>. We heavily rely on <a href="http://memcached.org/">Memcached</a> Heroku addon and we use <a href="http://sendgrid.com/">SendGrid</a> and <a href="http://mailchimp.com/">MailChimp</a> to send e-mail. Systems are monitored by a combination of <a href="http://newrelic.com/">New Relic</a> and <a href="https://www.pingdom.com/">Pingdom</a>. All of this is built, tested and deployed with <a href="http://jenkins-ci.org/">Jenkins</a>.</p>

<p><img src="http://artsy.github.com/images/2012-10-10-artsy-technology-stack/artsy-infrastructure.png"></p>

<p>In this post I&#8217;ll go in depth in our current system architecture and tell you the story about how these parts all came together.</p>

<!-- more -->


<h2>Early Prototypes</h2>

<p>Artsy early prototypes in 2010 consisted of a combination of PHP and Java web services running on JBoss and backed by a MySQL database. The system had more similarities with a large transactional banking application than a consumer website.</p>

<p>In early 2011 we rebooted the project on Ruby on Rails. RDBMS storage was replaced with NoSQL MongoDB. A <a href="http://www.10gen.com/presentations/MongoNYC-2012/Using-MongoDB-to-Build-Artsy">video</a> was recorded at MongoNYC 2012 that goes in depth into this specific choice.</p>

<h2>Artsy Architecture Today</h2>

<p>Having only a handful of engineers, our goal has always been to keep the number of moving parts to an absolute minimum. With a few new engineers we were able to expand things a bit.</p>

<h2>Artsy Website Front-End</h2>

<p>The Artsy website is a responsive <a href="http://backbonejs.org/">Backbone.js</a> application written in <a href="http://coffeescript.org/">CoffeeScript</a> and <a href="http://sass-lang.com/">SASS</a> and served from a Rails back-end. The generated JavaScript and CSS files are packaged and compressed with <a href="http://documentcloud.github.com/jammit/">Jammit</a> and deployed to Amazon S3. The Rails app itself is a traditional MVC system that bootstraps application data and mostly serves SEO needs, such as meta tags, escaped fragments and page titles. Once the basic data has been rendered though, Backbone routing takes over and you&#8217;re now navigating a client-side browser app with pushState support as available, swapping frames and rendering views using JST templates and JSON data returned from the API.</p>

<h2>Core API</h2>

<p>The website talks to the nervous system of Artsy, a RESTful API built in Ruby and <a href="https://github.com/intridea/grape">Grape</a>. While it&#8217;s not currently available for 3rd party applications for various image rights-related reasons, you can play with it <a href="http://artsy.net/api/v1/explorer">here</a>.</p>

<p>In the early days we did a ton of domain-driven design and spent a lot of time modeling concepts such as <em>artist</em> or <em>artwork</em>. The API has read and write behavior for all our domain concepts. Probably 70% of it is pure CRUD doing <a href="http://mongoid.org/">Mongoid</a> queries with a layer of access control in <a href="https://github.com/ryanb/cancan">CanCan</a> and cache partitioning and binding using <a href="http://confreaks.com/videos/986-goruco2012-from-zero-to-api-cache-w-grape-mongodb-in-10-minutes">Garner</a>.</p>

<h2>Search Autocomplete</h2>

<p>The first iteration of the website&#8217;s text search was powered by <a href="https://github.com/artsy/mongoid_fulltext">mongoid_fulltext</a>. Today we run an <a href="http://lucene.apache.org/solr/">Apache Solr</a> master-slave environment hosted on EC2.</p>

<h2>Offline Indexes</h2>

<p>The indexes that serve complex queries like related artists/artworks and filtered searches of artworks are all built offline. Our index-building system runs continuously, repeatedly pulling data from our production system to build the most out-of-date index. All of the most current indexes are imported back into production by a daily batch process and we swap the old indexes out atomically using <a href="https://github.com/aaw/mongoid_collection_snapshot">mongoid_collection_snapshot</a>.</p>

<p>One of such indexes a <em>similarity graph</em> that we query to produce most similar results on the website, other indexes serve filtering needs, etc. We run these processes nightly.</p>

<h2>Admin Back-End and Partner CMS</h2>

<p>The Artsy CMS and the Admin system are two newer projects and serve the needs of our partners and our internal back-end needs, respectively. These are built on a thin <a href="http://nodejs.org">Node.js</a> server that proxies requests to our API using <a href="https://github.com/nodejitsu/node-http-proxy">node-http-proxy</a>. They consist of a client-side Backbone.js application with assets packaged with <a href="https://github.com/craigspaeth/nap">nap</a>. This is a lot like our website, but completely decoupled from the main Rails application and sharing the same technology for both client and server with CoffeeScript and <a href="http://jade-lang.com/">Jade</a>.</p>

<h2>Folio Partner App</h2>

<p>Artsy makes a free iOS application, called <a href="http://artsy.github.com/blog/categories/ios/">Folio</a>, which lets our partners display their inventory at art fairs.</p>

<p>Folio is a native iOS implementation. The interface is heavily skinned UIKit with CoreData for storage. Our network code was originally a thin layer on top of NSURLConnection, but for our forthcoming update, we’ve rewritten it to use <a href="https://github.com/AFNetworking/AFNetworking/">AFNetworking</a>. We manage external dependencies with <a href="https://github.com/CocoaPods/CocoaPods">CocoaPods</a>.</p>

<h2>Want More Specifics? Have Questions?</h2>

<p>We hope you find this useful and are happy to describe any aspect of our system on this blog. Please ask questions below, we’ll be happy to answer them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to Run RSpec Test Suites in Parallel with JenkinsCI Build Flow]]></title>
    <link href="http://artsy.github.com/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/"/>
    <updated>2012-10-09T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/10/09/how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow</id>
    <content type="html"><![CDATA[<p>We now have over 4700 RSpec examples in one of our projects. They are stable, using the techniques described in an <a href="http://artsy.github.com/blog/2012/02/03/reliably-testing-asynchronous-ui-w-slash-rspec-and-capybara/">earlier post</a> and organized in <a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">suites</a>. But they now take almost 3 hours to run, which is clearly unacceptable.</p>

<p>To solve this, we have parallelized parts of the process with existing tools, and can turn a build around in just under an hour. This post will dive into our <a href="http://jenkins-ci.org/">Jenkins</a> build flow setup.</p>

<p>To keep things simple, we&#8217;re going to only build the <code>master</code> branch. When a change is committed on <code>master</code> we&#8217;re going to push <code>master</code> to a <code>master-ci</code> branch and trigger a distributed build on <code>master-ci</code>. Once all the parts have finished, we&#8217;ll complete the build by pushing <code>master-ci</code> to <code>master-succeeded</code> and notify the dev team of success or failure.</p>

<p>Here&#8217;s a diagram of what&#8217;s going on.</p>

<p><img src="http://artsy.github.com/images/2012-10-09-how-to-run-rspec-test-suites-in-parallel-with-jenkins-ci-build-flow/master-ci.png"></p>

<!-- more -->


<h2>Plugins</h2>

<p>Install the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Build+Flow+Plugin">Build Flow</a> and the <a href="https://wiki.jenkins-ci.org/display/JENKINS/Parameterized+Trigger+Plugin">Parameterized Trigger</a> plugin. Grant <code>Anonymous</code> job read permissions in Jenkins system configuration (see <a href="https://issues.jenkins-ci.org/browse/JENKINS-14027">JENKINS-14027</a>).</p>

<p>Create the following Jenkins jobs.</p>

<h2>master-prequel</h2>

<p>A free-style job that connects to the SCM, in our case Git.</p>

<ul>
<li>Set SCM repository URL to your Git repo, eg. <code>git@github.com:spline/reticulator.git</code></li>
<li>Change the default branch specifier from <code>**</code> to <code>master</code>. We&#8217;ll be pushing a <code>master-ci</code> branch, which could, in turn, cause more builds if you don&#8217;t do this.</li>
<li>Add a post-build action to build another project. Trigger the <code>master</code> project if the build succeeds.</li>
</ul>


<h2>master</h2>

<p>This is a build-flow job. We&#8217;ll describe the individual tasks that the flow invokes further. The flow DSL looks as follows.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-init&quot;</span><span class="p">)</span>
</span><span class='line'><span class="n">parallel</span> <span class="p">(</span>
</span><span class='line'> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-task&quot;</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="s2">&quot;spec:suite:models:ci&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-task&quot;</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="s2">&quot;spec:suite:api:ci&quot;</span><span class="p">)</span> <span class="p">},</span>
</span><span class='line'> <span class="p">{</span> <span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-task&quot;</span><span class="p">,</span> <span class="n">tasks</span><span class="p">:</span> <span class="s2">&quot;spec:suite:integration:ci&quot;</span><span class="p">)</span> <span class="p">}</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="n">build</span><span class="p">(</span><span class="s2">&quot;master-ci-succeeded&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is a good place to add an e-mail notification post-build action for every unstable build.</p>

<h2>master-ci-init</h2>

<p>A free-style job that creates the <code>master-ci</code> branch from master. It needs to be connected to your SCM and executes the following shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>git checkout <span class="nv">$GIT_BRANCH</span>
</span><span class='line'>git push origin -f <span class="nv">$GIT_BRANCH</span>:<span class="nv">$GIT_BRANCH</span><span class="se">\-</span>ci
</span></code></pre></td></tr></table></div></figure>


<p>Note that we cannot combine this task with <code>master-prequel</code>, because we have to make sure the branch creation runs once under the entire flow, while <code>master-prequel</code> can be run multiple times, once per check-in. Otherwise the <code>master-ci</code> branch could get updated before a <code>master-ci-task</code> runs from a previous flow execution.</p>

<h2>master-ci-task</h2>

<p>A parameterized build that accepts a <code>tasks</code> parameter that the flow will pass in.</p>

<p>Change the default branch specifier to <code>master-ci</code> and execute the following shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>bundle install
</span><span class='line'>bundle <span class="nb">exec </span>rake <span class="nv">$tasks</span>
</span></code></pre></td></tr></table></div></figure>


<p>This example runs <code>rake $tasks</code>, which we define to be various test suites in our flow DSL. Our test suite setup is described in <a href="http://artsy.github.com/blog/2012/05/15/how-to-organize-over-3000-rspec-specs-and-retry-test-failures/">this post</a>. Your mileage may vary.</p>

<h2>master-ci-succeeded</h2>

<p>This is an optional step. We use this free-style job to tag <code>master-ci</code> as <code>master-succeeded</code> with the following shell script.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="c">#!/bin/bash</span>
</span><span class='line'>git checkout <span class="nv">$GIT_BRANCH</span>
</span><span class='line'>git push origin -f <span class="nv">$GIT_BRANCH</span>:<span class="k">${</span><span class="nv">GIT_BRANCH</span><span class="p">/%-ci/</span><span class="k">}</span>-succeeded
</span></code></pre></td></tr></table></div></figure>


<p>Our deployment to production will pickup the <code>master-succeeded</code> branch when it&#8217;s time.</p>

<h2>Improvements?</h2>

<p>I see a few possible improvements here that might require a bit of work.</p>

<ul>
<li>The ability to split an RSpec suite up across an arbitrary number N sub-jobs and M executors would create an optimal parallel split based on the resources available.</li>
<li>Passing the value of <code>GIT_BRANCH</code> and <code>GIT_COMMIT</code> across these jobs would enable building any branch and eliminate the need for <code>master-ci-init</code>.</li>
<li>Build flow could support SCM polling the same way as free-style jobs, avoiding the need for <code>master-prequel</code>. We weren&#8217;t able to get a stable notification of changes from Github with the Jenkins Github plugin.</li>
</ul>


<p>Please suggest further improvements in the comments below!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Grid Thumbnails]]></title>
    <link href="http://artsy.github.com/blog/2012/09/13/on-grid-thumbnails/"/>
    <updated>2012-09-13T16:40:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/09/13/on-grid-thumbnails</id>
    <content type="html"><![CDATA[<p><img src="http://artsy.github.com/images/2012-09-13-on-grid-thumbnails/grid.jpg"></p>

<p>Artsy Folio, our free iPad app for Gallery Partners, had been in the App Store for a couple of weeks before the iPad with a Retina display was announced. This had been something we expected internally and felt the application would be ready. We had all our image assets available in <em>@2x</em> versions and an image pipeline that would take scaling into account. With that in mind, we changed our artwork grid view to show a double resolution image. Finally, once we were happy that it worked fine on the simulator, we sent the build off to Apple for review.</p>

<p>The app passed review, and was Retina-ready before the actual release. But within hours of getting our hands on a real Retina iPad, we had to pull the app. This post will explain why, and what we did to work it out.</p>

<!--more-->


<p>Scrolling the grid view was slow. Extremely slow. The reason why wasn&#8217;t obvious initially, but thanks to digging around using <a href="http://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/InstrumentsUserGuide/Introduction/Introduction.html">Instruments</a>, we saw that a great deal of time was spent in Apple&#8217;s image processing libraries. This was a strong hint that the problem involved taking the file and getting it to the screen.</p>

<p>In our naiveté, Folio was originally using <code>UIImage</code>&#8217;s <code>initWithContentsOfFile:</code> to load (without caching) a jpg from the file system. Once the file was loaded into memory, we displayed it onscreen in an <code>UIImageView.</code> This was fast enough to deal with our small thumbnails of <em>240x240</em> but the moment that you start asking it to pull 3 or 4 <em>480x480</em> jpg files off the filesystem, decompress them and then put them on the screen, you&#8217;re not going to have a smooth scroll.</p>

<p><img src="http://artsy.github.com/images/2012-09-13-on-grid-thumbnails/thumbnails.jpg"></p>

<p>As we knew that we were looking at an issue with getting images from a file, it made sense to start looking at ways to move image processing off the main thread. This Stack Overflow thread on <a href="http://stackoverflow.com/questions/1815476/cgimage-uiimage-lazily-loading-on-ui-thread-causes-stutter">UIImage lazy loading</a> proved to be an essential start to dealing with our issue. We needed a thread-safe way to get the contents of a file and to pass them through once the images had been decoded. What we needed was <a href="https://gist.github.com/3715588">initImmediateLoadWithContentsOfFile</a>, a thread-safe way to go from a filepath to a <code>UIImage</code>.</p>

<p>Now that we had a way to get an image that was safe to go on a background thread, we gave our grid an <code>NSOperationQueue</code> and created a method to kick off a <code>NSInvocationOperation</code> with our the cell we&#8217;re looking at and the address it needs to load the thumbnail.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">setImageAsyncAtPath:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="n">imageAddress</span> <span class="nl">forGridCell:</span><span class="p">(</span><span class="n">ARImageGridViewCell</span> <span class="o">*</span><span class="p">)</span><span class="n">cell</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">NSDictionary</span> <span class="o">*</span><span class="n">operationOptions</span> <span class="o">=</span> <span class="err">@</span><span class="p">{</span><span class="s">@&quot;address&quot;</span><span class="o">:</span> <span class="n">imageAddress</span><span class="p">,</span> <span class="s">@&quot;cell&quot;</span><span class="o">:</span> <span class="n">cell</span><span class="p">};</span>
</span><span class='line'>    <span class="n">NSInvocationOperation</span> <span class="o">*</span><span class="n">operation</span> <span class="o">=</span> <span class="p">[[</span><span class="n">NSInvocationOperation</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initWithTarget:</span><span class="n">self</span> <span class="nl">selector:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">asyncLoadImage:</span><span class="p">)</span> <span class="nl">object:</span><span class="n">operationOptions</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>    <span class="p">[</span><span class="n">_operationQueue</span> <span class="nl">addOperation:</span><span class="n">operation</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>When we had the simplest implementation of <code>asyncLoadImage</code> we found that scrolling would sometimes result in grid cells displaying the wrong image. It turned out that in the time it took to decode the jpg,  the cell had already been reused for a different artwork. This one totally caught us off guard!</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="o">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nl">asyncLoadImage:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="n">options</span> <span class="p">{</span>
</span><span class='line'>    <span class="err">@</span><span class="n">autoreleasepool</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">NSString</span> <span class="o">*</span><span class="n">address</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">@&quot;address&quot;</span><span class="p">];</span>
</span><span class='line'>        <span class="n">ARImageGridViewCell</span> <span class="o">*</span><span class="n">cell</span> <span class="o">=</span> <span class="n">options</span><span class="p">[</span><span class="s">@&quot;cell&quot;</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>        <span class="c1">// don&#39;t load if it&#39;s on a different cell</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">([</span><span class="n">cell</span><span class="p">.</span><span class="n">imagePath</span> <span class="nl">isEqualToString:</span><span class="n">address</span><span class="p">])</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">UIImage</span> <span class="o">*</span><span class="n">thumbnail</span> <span class="o">=</span> <span class="p">[[</span><span class="n">UIImage</span> <span class="n">alloc</span><span class="p">]</span> <span class="nl">initImmediateLoadWithContentsOfFile:</span><span class="n">address</span><span class="p">];</span>
</span><span class='line'>
</span><span class='line'>            <span class="c1">// double check that during the decoding the cell&#39;s not been re-used</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">([</span><span class="n">cell</span><span class="p">.</span><span class="n">imagePath</span> <span class="nl">isEqualToString:</span><span class="n">address</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="n">thumbnail</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="p">[</span><span class="n">cell</span> <span class="nl">performSelectorOnMainThread:</span><span class="k">@selector</span><span class="p">(</span><span class="nl">setImage:</span><span class="p">)</span> <span class="nl">withObject:</span><span class="n">thumbnail</span> <span class="nl">waitUntilDone:</span><span class="n">NO</span><span class="p">];</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>This meant we could have our UI thread dealing with scrolling, whilst <a href="https://developer.apple.com/technologies/mac/core.html">Grand Central Dispatch</a> would deal with ensuring the image processing was done asynchronously and as fast as possible.However, this still wasn&#8217;t enough. We were finding if you scrolled fast enough, you could still see images pop in after the grid cell was visible. For this, we actually went back to the beginning, and made our image pipeline create a <em>120x120</em> thumbnail for each artwork that we use <code>initImmediateLoadWithContentsOfFile</code> to load on the UI thread. This is fast enough to smoothly scroll, and is replaced by the higher resolution image practically instantly.</p>

<p><img src="http://artsy.github.com/images/2012-09-13-on-grid-thumbnails/hover-thumbnails.jpg"></p>

<p>The rest of the story is pretty straightforward. We wrapped all this up within a few days and got out a version of Folio for the Retina iPad, I ended up doing a talk about the issues involved in doing this in <a href="http://lsx.co/lsxcafe/">Leeds LSxCafé</a>, and you got a blog post out of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Artsy Builds Labs, Experiments and Easter Eggs]]></title>
    <link href="http://artsy.github.com/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs/"/>
    <updated>2012-09-12T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/09/12/how-artsy-builds-experiments-labs-and-easter-eggs</id>
    <content type="html"><![CDATA[<p>At Artsy Engineering we encourage a culture of experimentation with something called <em>labs</em>.</p>

<p>A new feature released into production is usually only turned on for a handful of users. We get feedback from our own team and a tiny group of early adopters, iterate, fix bugs, toss failed experiments and work on promoting complete, well behaved features to all users. The labs infrastructure gives us a chance to sleep on an idea and polish details. It also allows us to make progress continuously and flip a switch on the very last day.</p>

<p>My favorite labs features push our collective imagination and give birth to productive brainstorms around coffee at a popular startup hangout around the corner from our Manhattan office. But the team&#8217;s favorite labs are, by far, those that ship as easter eggs. These are fun and sometimes useful features that don&#8217;t make much business sense. So, before I explain our rudimentary labs system, I want to invite you to our easter egg hunt. Check out <a href="http://artsy.net/humans.txt">http://artsy.net/humans.txt</a> for instructions.</p>

<!-- more -->


<p>Our labs infrastructure is rather straightforward. A lab feature data model is pretty boring, with the exception of a <code>created_by</code> field. Each such lab feature belongs to an engineer and you have to nurture your feature and fight for it to meet the production bar!</p>

<figure class='code'><figcaption><span>app/models/lab_feature.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LabFeature</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Timestamps</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:name</span>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:created_by</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>You can enable and disable a lab feature for a given user.</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="n">references_and_referenced_in_many</span> <span class="ss">:lab_features</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">enable_lab_feature!</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab_features</span><span class="o">.</span><span class="n">push</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span> <span class="k">unless</span> <span class="n">lab_features</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">disable_lab_feature!</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab_features</span><span class="o">.</span><span class="n">delete</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">save!</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">lab_feature_enabled?</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>    <span class="n">lab_features</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="n">feature</span><span class="p">)</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Ruby, we check whether the user has a lab with <code>lab_feature_enabled?</code>. In JavaScript, we return the lab features in a Backbone.js collection and check for the same.</p>

<figure class='code'><figcaption><span>app/coffeescripts/models/user.coffee</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Models</span><span class="p">.</span><span class="nx">CurrentUser</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Model</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">hasLabFeature: </span><span class="nf">(feature_name) -&gt;</span>
</span><span class='line'>    <span class="nx">$</span><span class="p">.</span><span class="nx">inArray</span><span class="p">(</span><span class="nx">feature_name</span><span class="p">,</span> <span class="nx">@get</span><span class="p">(</span><span class="s1">&#39;lab_features&#39;</span><span class="p">))</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>We also have a bit of UI and an API to let you turn a lab feature on and off when you&#8217;re part of our labs program. The program itself is also a lab feature!</p>

<p>Lab features can be retired after the code is promoted to all users or deleted.</p>

<figure class='code'><figcaption><span>app/models/lab_feature.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LabFeature</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">retire!</span>
</span><span class='line'>    <span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">u</span><span class="o">|</span>
</span><span class='line'>      <span class="n">u</span><span class="o">.</span><span class="n">disable_lab_feature!</span><span class="p">(</span><span class="nb">self</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>    <span class="n">destroy</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This &#8220;system&#8221; is super simple. I encourage you to think more in terms of experiments or labs - it helped us foster a culture of innovation, tremendously reduced risk of catastrophic failures, and, because anyone can push anything into labs at any time, removed the unnecessary discussions around whether an idea is worthy of an implementation at all.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing with Delayed Jobs]]></title>
    <link href="http://artsy.github.com/blog/2012/08/16/testing-with-delayed-jobs/"/>
    <updated>2012-08-16T21:21:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/08/16/testing-with-delayed-jobs</id>
    <content type="html"><![CDATA[<p>A mean bug made it into our production environment. It wasn&#8217;t caught by our extensive test suite and caused thousands of emails to be sent to a handful of people. The root cause was an unfortunate combination of <a href="https://github.com/plataformatec/devise">Devise</a>, <a href="https://github.com/collectiveidea/delayed_job">DelayedJob</a> and, of course, our own code. It was an easy fix, but nobody ever wants this to happen again.</p>

<p>tl;dr DelayedJob says it&#8217;s possible to set <code>Delayed::Worker.delay_jobs = false</code> for your tests. Don&#8217;t do it.</p>

<!-- more -->


<p>Consider the following <code>User</code> model that implements various Devise strategies which support some kind of notification.</p>

<figure class='code'><figcaption><span>app/models/user.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">User</span>
</span><span class='line'>  <span class="kp">include</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Document</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">devise</span> <span class="ss">:database_authenticatable</span><span class="p">,</span> <span class="ss">:registerable</span><span class="p">,</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">field</span> <span class="ss">:notified_at</span><span class="p">,</span> <span class="n">type</span><span class="p">:</span> <span class="no">DateTime</span>
</span><span class='line'>  <span class="n">after_save</span> <span class="ss">:notify!</span><span class="p">,</span> <span class="ss">:if</span> <span class="o">=&gt;</span> <span class="ss">:notify?</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">notify!</span>
</span><span class='line'>    <span class="k">super</span>
</span><span class='line'>    <span class="n">update_attributes!</span><span class="p">({</span> <span class="n">notified_at</span><span class="p">:</span> <span class="no">Time</span><span class="o">.</span><span class="n">now</span><span class="o">.</span><span class="n">utc</span> <span class="p">})</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>We are overriding a black box <code>notify!</code> method and updating an attribute with a timestamp of the last notification.</p>

<p>Let&#8217;s write a test.</p>

<figure class='code'><figcaption><span>spec/models/user_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;notification&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;sends one email&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="n">notify!</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">ActionMailer</span><span class="o">::</span><span class="no">Base</span><span class="o">.</span><span class="n">deliveries</span><span class="p">,</span> <span class="ss">:count</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;updates notified_at&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="n">notify!</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="n">subject</span><span class="p">,</span> <span class="ss">:notified_at</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>All green. But once this code hit production, <code>notify!</code> was called in an infinite loop. How is that possible?</p>

<p>The call to <code>notify!</code> is delayed using DelayedJob in production and is not delayed in test. It does not work under DelayedJob and will create as many delayed notifications as it possibly can until it runs out of stack space.</p>

<p>As a common pattern in Devise, the implementation of <code>notify!</code> relies on an instance variable to signal that a notification has been sent. Setting the instance variable avoids sending the notification twice for multiple calls to <code>save!</code>. Our <code>after_save</code> callback invokes <code>update_attributes!</code>, which causes another <code>notify!</code> call unless <code>notify?</code> returns <code>false</code>. In a test, the call to <code>super</code> inside <code>notify!</code> will execute the notification (setting the instance variable), but will create a delayed job in production (without setting it).</p>

<p>We&#8217;ll start by bringing our tests closer to a real production environment by leaving <code>Delayed::Worker.delay_jobs = true</code> and making sure our problem is reproduced with a spec. We could call <code>Delayed::Worker.new.work_off</code> for every test that needs to execute a delayed job, but that would be rather tedious. A better approach may be to register an observer that will execute a delayed job every time one is created. This is similar to a production environment where having enough delayed workers almost guarantees a job is picked up immediately after being scheduled.</p>

<figure class='code'><figcaption><span>config/initializers/delayed_job_observer.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">DelayedJobObserver</span> <span class="o">&lt;</span> <span class="no">Mongoid</span><span class="o">::</span><span class="no">Observer</span>
</span><span class='line'>  <span class="n">observe</span> <span class="no">Delayed</span><span class="o">::</span><span class="no">Job</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">class</span> <span class="o">&lt;&lt;</span> <span class="nb">self</span>
</span><span class='line'>    <span class="kp">attr_accessor</span> <span class="ss">:runs</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">after_create</span><span class="p">(</span><span class="n">delayed_job</span><span class="p">)</span>
</span><span class='line'>    <span class="n">delayed_job</span><span class="o">.</span><span class="n">invoke_job</span>
</span><span class='line'>    <span class="no">DelayedJobObserver</span><span class="o">.</span><span class="n">runs</span> <span class="o">+=</span> <span class="mi">1</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="no">DelayedJobObserver</span><span class="o">.</span><span class="n">runs</span> <span class="o">=</span> <span class="mi">0</span>
</span></code></pre></td></tr></table></div></figure>


<p>The complete code, which handles a few more cases, including enabling and disabling the observer, and counting successful runs and errors can be found in <a href="https://gist.github.com/3370052">this gist</a>. Please help us improve it.</p>

<p>We can now test our notification without compromising on the delayed nature of the job and add a test making sure we create a single delayed job from a call to <code>notify!</code>.</p>

<figure class='code'><figcaption><span>spec/models/user_spec.rb</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">describe</span> <span class="no">User</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">subject</span> <span class="p">{</span> <span class="no">User</span><span class="o">.</span><span class="n">new</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">context</span> <span class="s2">&quot;notification&quot;</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>    <span class="n">it</span> <span class="s2">&quot;creates one delayed job&quot;</span> <span class="k">do</span>
</span><span class='line'>      <span class="n">expect</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">subject</span><span class="o">.</span><span class="n">notify!</span>
</span><span class='line'>      <span class="p">}</span><span class="o">.</span><span class="n">to</span> <span class="n">change</span><span class="p">(</span><span class="no">DelayedJobObserver</span><span class="p">,</span> <span class="ss">:runs</span><span class="p">)</span><span class="o">.</span><span class="n">by</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'>    <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>This test will also run for a long time before failing with a stack overflow error. Our fix was not to call <code>notify!</code> from an <code>after_save</code> callback.</p>

<p>We&#8217;ve suggested that immediate execution using an observer becomes a feature in DelayedJob in <a href="https://github.com/collectiveidea/delayed_job/issues/423">#423</a>. Please add your comments.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On Our Objective-C Code Standards]]></title>
    <link href="http://artsy.github.com/blog/2012/08/14/on-objective-c-code-standards/"/>
    <updated>2012-08-14T14:23:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/08/14/on-objective-c-code-standards</id>
    <content type="html"><![CDATA[<p>With the release of Xcode 4.4 I&#8217;ve taken a look back at our existing code standards and tried to come up with something that is cleaner and more elegant. Here are a few of the ideas I&#8217;ve been using to modernize the codebase.</p>

<h3>Remove private method declarations and use class extensions to add ivars.</h3>

<p>First to get chopped by the deletion button are private method declarations. After Xcode 4.2 came out we took to using the class extension feature to add private method declarations at the top of implementation files. This was a nice way of keeping private methods out of the header files. Now that the compiler will check for pre-existing method signatures within the same object there&#8217;s no need to define their interfaces.</p>

<!--more-->


<p>Occasionally it&#8217;s necessary for subclass to know about private methods defined by its superclass, so we use a shared category to let them know what they respond to. Like Apple, we also quit using <code>@private</code> in header files.</p>

<p>Ivars now should go in class extensions, and be prefixed by an underscore. Apple advises that you don&#8217;t use method names with underscores but encourage underscored variable names. This also can free up method parameters from having ugly names such as anArtwork or aString.</p>

<h3>Use object literals when possible.</h3>

<p>Object literals are ways of adding syntacitcal sugar to the Objective-C language, they let you access keys and values easily on <code>NSDictionary</code>s and objects in <code>NSArray</code>s. There&#8217;s no reason to not be using them if you&#8217;re supporting iOS 4 and above. It&#8217;s simple a matter of <code>_artworks[2]</code> vs <code>[_artworks objectAtIndex:2]</code>.</p>

<h3>Dot syntax is OK for non-properties.</h3>

<p>OK so, I admit it. I whined when properties came out. It was back in 2007 and the Objective-C was ranked 40th in the world, it&#8217;s now ranked <a href="http://www.tiobe.com/index.php/paperinfo/tpci/Objective-C.html">3nd most popular programming language.</a> Within timeframe, my opinion on the subject of properties changed also.</p>

<p>Originally when properties came out they exclusively were given the right to use dot notation on objects. This makes sense as they were created to provide public access to ivars which normally you can only access internally using the dot notation. With Xcode 4.3, that also changed. Now, if a method doesn&#8217;t have any arguments it can be called using dot notation. I&#8217;m in favour of using this. For me a good rule of thumb has been if a method returns something, dot notation is OK. For example, <code>_artworksArray.count</code> is fine whilst <code>_parsingOperation.stop</code> isn&#8217;t.</p>

<h3>Keep external code out of your project.</h3>

<p>External, or vendored code should be kept out of the main body of your code. You can use CocoaPods to keep all that code in check and up-to-date. CocoaPods is a project that aims to be what bundler does for ruby projects, or npm for node. It will deal with your dependancies whilst you can concentrate on your own code. It will create a seperate Xcode project that handles all you dependancies leaving your project only as your own code.</p>

<h3>Use umbrella imports.</h3>

<p>To try and keep the amount of noise we have at the top of our implementation files we have started to reduce the number of <code>#import "ARModel.h"</code> lines we use. By creating a <code>Models.h</code> file and having that include all the models it means we can still have a look through the <code>#imports</code> at the top to get an idea of the connections between the objects as that will only show the important imports. These can optionally be moved into your precompiled header files.</p>

<h3>Keep your code clean.</h3>

<p>Whitespace can and does slowly accumulate at the line-endings of your code. You should make sure that the new preference for automatically trimming whitespace is turned on in the text editing section of Xcode&#8217;s preferences.</p>

<h3>IBOutlets should probably go in your class extensions.</h3>

<p>With modern versions of Xcode, it doesn&#8217;t matter that your IBOutlets are defined in places other than in headers. As Objective-C developers, we&#8217;ve come a long way from having to repeatedly drag a .h from Xcode to Interface Builder, so maybe it&#8217;s time to rethink the idea that our interface outlets should be publicly accessible. My opinion is that a controller&#8217;s views are for the most part a private affair and that if you want to expose their functionality you do it through custom methods in the controller. There are some downsides to this, in that  initially you have to change to the implementation file when using hybrid view when connecting them.</p>

<p>These decisions have come from internal discussions and from watching many WWDC sessions on the topic. We highly recommend watching the following <a href="https://developer.apple.com/wwdc/">WWDC sessions</a>.</p>

<p>  <a href="https://developer.apple.com/videos/wwdc/2011/">WWDC 2011</a>: 105 Polishing Your App, 112 Writing Easy To Change Code and 322 - Objective-C Advancements in Depth.</p>

<p>  <a href="https://developer.apple.com/videos/wwdc/2012/">WWDC 2012</a>: 405 Modern Objective-C and 413 Migrating to Modern Objective-C</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On-Demand Jenkins Slaves with Amazon EC2]]></title>
    <link href="http://artsy.github.com/blog/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2/"/>
    <updated>2012-07-10T13:30:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/07/10/on-demand-jenkins-slaves-with-amazon-ec2</id>
    <content type="html"><![CDATA[<p>The <a href="http://artsy.net">Artsy</a> team faithfully uses <a href="http://jenkins-ci.org">Jenkins</a> for continuous integration. <a href="http://artsy.github.com/blog/2012/05/27/using-jenkins-for-ruby-and-ruby-on-rails-teams/">As we&#8217;ve described before</a>, our Jenkins master and 8 slaves run on Linode. This arrangement has at least a few drawbacks:</p>

<ul>
<li>Our Linode servers are manually configured. They require frequent maintenance, and inconsistencies lead to surprising build failures.</li>
<li>The fixed set of slaves don&#8217;t match the pattern of our build jobs: jobs get backed up during the day, but servers are mostly unused overnight and on weekends.</li>
</ul>


<p>The <a href="https://wiki.jenkins-ci.org/display/JENKINS/Amazon+EC2+Plugin">Amazon EC2 Plugin</a> allowed us to replace those slaves with a totally scripted environment. Now, slaves are spun up in the cloud whenever build jobs need them.</p>

<!-- more -->


<p>To set up the build slave&#8217;s Amazon Machine Image (AMI), we started from an <a href="http://cloud-images.ubuntu.com/releases/oneiric/release/">official Ubuntu 11.10</a> (Oneiric Ocelot) AMI, ran initialization scripts to set up our build dependencies (MongoDB, Redis, ImageMagick, Firefox, RVM, NVM, etc.), packaged our modified instance into its own AMI, and then set up the EC2 Plugin to launch instances from this custom AMI.</p>

<p>Our AMI setup steps are captured entirely in a <a href="https://gist.github.com/3085368">GitHub gist</a>, but because our build requirements are specific to our applications and frameworks, most organizations will need to modify these scripts to their own use cases. Given that caveat, here&#8217;s how we went from base Ubuntu AMI to custom build slave AMI:</p>

<ol>
<li>We <a href="https://console.aws.amazon.com/ec2/home?region=us-east-1#launchAmi=ami-4dad7424">launched</a> an Ubuntu 11.10 AMI <code>4dad7424</code> via the AWS console.</li>
<li>Once the instance was launched, we logged in with the SSH key we generated during setup.</li>
<li><p>We ran the following commands to configure the instance:</p>

<pre><code> curl -L https://raw.github.com/gist/3085368/_base-setup.sh | sudo bash -s
 sudo su -l jenkins
 curl -L https://raw.github.com/gist/3085368/_jenkins-user-setup.sh | bash -s
</code></pre></li>
<li><p>From the &#8220;Instances&#8221; tab of the AWS Console, we chose the now-configured instance, and from the &#8220;Instance Actions&#8221; dropdown, selected &#8220;Stop&#8221;, followed by &#8220;Create Image (EBS AMI)&#8221;.</p></li>
</ol>


<p>Next we installed the Amazon EC2 Plugin on our Jenkins master, and entered the following configuration arguments for the plugin. (Replace the AMI ID with your own, the result of Step 4 above.)</p>

<p><img src="http://artsy.github.com/images/2012-07-10-on-demand-jenkins-slaves-with-amazon-ec2/ec2-plugin-config.png" title="[Jenkins EC2 Plugin configuration]" ></p>

<p>New build slaves began spawning immediately in response to job demand! Our new &#8220;Computers&#8221; page on Jenkins looks like this:</p>

<p><img src="http://artsy.github.com/images/2012-07-10-on-demand-jenkins-slaves-with-amazon-ec2/computer-list.png" title="[Jenkins computer list]" ></p>

<p>We have the option of provisioning a new build slave via a single click, but so far, this hasn&#8217;t been necessary, since slaves have automatically scaled up and down with demand. We average around 4-8 build slaves during the day, and 0-1 overnight and on weekends.</p>

<h2>Outcome and Next Steps</h2>

<p>This arrangement hasn&#8217;t been in place for long, but we&#8217;re excited about the benefits it&#8217;s already delivered:</p>

<ul>
<li>Builds now take a predictable amount of time, since slaves automatically scale up to match demand.</li>
<li>Slaves offer a more consistent and easily maintained configuration, so there are fewer spurious failures.</li>
<li>Despite higher costs on EC2, we hope to spend about the same (or maybe even less) now that we&#8217;ll need to operate only the master server during periods of inactivity (like nights and weekends).</li>
</ul>


<p>As proponents of <em>automating the hard stuff</em>, we get a real kick out of watching identical slaves spin up as builds trickle in each morning, then disappear as the queue quiets down in the evening. Still, there are a few improvements to be made:</p>

<ul>
<li>Our canonical slave&#8217;s configuration should be scripted with <a href="http://www.opscode.com/chef/">Chef</a>.</li>
<li>Sharp-eyed readers will notice that our Jenkins master is still a Linode server. It might benefit from the same type of scripted configuration as the slaves.</li>
<li>Cooler still would be for the EC2 plugin to take advantage of Amazon&#8217;s <a href="http://aws.amazon.com/ec2/spot-instances/">spot pricing</a>. Though not supported at the moment, it would allow us to spend a fraction as much (or spend the same amount, but on more powerful resources).</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Spend Time With Your Site]]></title>
    <link href="http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site/"/>
    <updated>2012-07-05T10:51:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/07/05/spend-time-with-your-site</id>
    <content type="html"><![CDATA[<p>Empathy with end users is critical when developing consumer-facing software. Many go <a href="http://innonate.com/2011/03/09/hackers-the-canon-of-consumer-facing-products/">even</a> <a href="http://www.uie.com/articles/self_design/">further</a> and argue that you should <em>be</em> your own user to effectively deliver the best experience.</p>

<blockquote><p><em>I&#8217;d encourage anyone starting a startup to become one of its users, however unnatural it seems.</em></p>

<p>&mdash; Paul Graham <a href="http://paulgraham.com/organic.html">Organic Startup Ideas</a></p></blockquote>

<p>In practice, though, this can be difficult:</p>

<ul>
<li>As a developer, you&#8217;re just not representative of the intended audience.</li>
<li>You&#8217;re [appropriately] focused on the product&#8217;s next iteration, while your audience is occupied with the current state.</li>
<li>You spend countless hours focused on product details&mdash;of course it&#8217;s a challenge to empathize with a casual visitor&#8217;s first impression.</li>
</ul>


<h2>Keeping it Real</h2>

<p>We&#8217;ve tried some best practices to overcome these tendencies. User feedback is emailed to everyone in the company. Engineers share customer support responsibilities. But one simple tool has been surprisingly useful: we stole a page from the agile development handbook and built an <a href="http://alistair.cockburn.us/Information+radiator">information radiator</a>. Like a <a href="http://en.wikipedia.org/wiki/Kanban_board">kanban board</a>, news ticker, or <a href="https://demo.geckoboard.com/dashboard/B6782E562794C2F2/">analytics wall board</a>, our information radiator gives us an ambient awareness of end users&#8217; experiences. How?</p>

<!-- more -->


<p><strong>It&#8217;s our site, as a slideshow.</strong></p>

<p><img class="screenshot" src="http://artsy.github.com/images/2012-07-05-spend-time-with-your-site/slideshow_screenshot.jpg" title="[Artsy as a slideshow]" ></p>

<p>That&#8217;s all. Our wall-mounted display shows the same web page that a visitor to our site recently requested. Every 20 seconds, it refreshes and shows a new, more recently requested page.</p>

<p>Without much effort, this gives us a sense of where users spend time on the site (<em>nudes seem popular today</em>). The impact of events such as email blasts or celebrity mentions is immediately apparent (<em>did <a href="https://twitter.com/aplusk">@aplusk</a> just tweet us?</em>). And when problems happen, we notice them as soon as errors pop up on the screen (<em><a href="http://gigaom.com/cloud/some-of-amazon-web-services-are-down-again/">AWS down again?</a></em>).</p>

<p>Of course, this doesn&#8217;t replace proper user research, analytics, or monitoring. And the approach might need tweaking to work for your site. The lesson, though, is <em>find a way to spend time with your site</em>.</p>

<h2>Implementation Notes</h2>

<p>Using <a href="https://github.com/matschaffer/knife-solo">knife-solo</a> and <a href="http://www.opscode.com/chef/">chef</a>, we spawned an <a href="http://aws.amazon.com/ec2/">EC2</a> instance and configured it to <a href="https://devcenter.heroku.com/articles/logging#syslog_drains">drain our main site&#8217;s logs from heroku</a>. A single, static web page contains a full-screen iframe and a bit of javascript that periodically requests the most recent URL from a tiny <a href="http://www.sinatrarb.com/">sinatra</a> app, loading the resulting URL into the iframe. The sinatra app performs an ugly bash command to grep the last appropriate GET request from the drained log, filtering out requests from Artsy HQ and other uninteresting cases. Via a special flag, our site suppresses the usual tracking and analytics when loaded in this context (you didn&#8217;t want to juice your stats, right?).</p>

<p>Have other tricks for keeping it real? Let us know in the comments.</p>

<p><em>Update:</em> See a gist with <a href="https://gist.github.com/3073907">sample code for the slideshow app</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Replacing #! Routes with PushState Using Backbone.js]]></title>
    <link href="http://artsy.github.com/blog/2012/06/25/replacing-hashbang-routes-with-pushstate/"/>
    <updated>2012-06-25T11:35:00-04:00</updated>
    <id>http://artsy.github.com/blog/2012/06/25/replacing-hashbang-routes-with-pushstate</id>
    <content type="html"><![CDATA[<blockquote><p>The only constant is change, continuing change, inevitable change, that is the dominant factor in society
[and web apps!] today. No sensible decision can be made any longer without taking into account not only
the world as it is, but the world as it will be.</p>

<p>&ndash; Isaac Asimov</p></blockquote>

<h2>R.I.P #!</h2>

<p>It did not take us long to discover we shared the concerns of Twitter&#8217;s
<a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb on hashbang routes</a>,
but it was almost a year before we were able to remove them from Artsy. Here&#8217;s how it went down.</p>

<p>Artsy relies on the <a href="http://documentcloud.github.com/backbone/">Backbone.js</a> framework for our client application
which offers a solid pushState routing scheme. This includes a seamless hashtag fallback for
<a href="http://caniuse.com/#feat=history">browsers that don&#8217;t support the HTML5 History API</a> (looking at you IE 9).</p>

<p>The pushState routing is optional, but <em>&#8220;the world as it should be&#8221;</em> suggests we say &#8220;Yes!&#8221; (or true) to pushState.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span><span class="p">({</span> <span class="nv">pushState: </span><span class="kc">true</span> <span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>




<!-- more -->


<h3>The Client</h3>

<p>At Artsy, we had left Backbone out of the loop for most of our internal linking. Our markup href attributes all
began with &#8216;/#!&#8217; and expected the browser&#8217;s default hash behavior to keep the page from refreshing. For a proper
pushState scheme, the app&#8217;s internal linking should begin with an absolute route. Backbone.js defaults to &#8216;/&#8217;, but
this is configurable.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Optional root attribute defaults to &#39;/&#39;</span>
</span><span class='line'><span class="nx">Backbone</span><span class="p">.</span><span class="nx">history</span><span class="p">.</span><span class="nx">start</span>
</span><span class='line'>  <span class="nv">pushState: </span><span class="kc">true</span>
</span><span class='line'>  <span class="nv">root: </span><span class="s2">&quot;/specialized/client/&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Internal Links</h4>

<p>All internal links need to begin with your configured root (&#8216;/&#8217; for Artsy).
Be sure to leave out your domain (<del>http://artsy.net</del>).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='html'><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/&quot;</span><span class="nt">&gt;</span>Home<span class="nt">&lt;/a&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="nt">&lt;a</span> <span class="na">href=</span><span class="s">&quot;/artwork/matthew-abbott-lobby-and-supercomputer&quot;</span><span class="nt">&gt;</span>My Favorite Work<span class="nt">&lt;/a&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>We now needed a global link handler that will leverage Backbone&#8217;s <code>navigate</code> method which takes
care of updating the URL and avoiding a page refresh or alternatively wiring up the hashtag fallback.
Since we follow the convention of starting all <code>href</code> attributes with our application&#8217;s root, we
can match on that in our selector to get all anchors whose link begins with our root, <code>a[href^='/']</code>.
This link handler is a great place to ensure backward compatibility while #!s are removed from
internal links.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Globally capture clicks. If they are internal and not in the pass </span>
</span><span class='line'><span class="c1"># through list, route them through Backbone&#39;s navigate method.</span>
</span><span class='line'><span class="nx">$</span><span class="p">(</span><span class="nb">document</span><span class="p">).</span><span class="kc">on</span> <span class="s2">&quot;click&quot;</span><span class="p">,</span> <span class="s2">&quot;a[href^=&#39;/&#39;]&quot;</span><span class="p">,</span> <span class="nf">(event) -&gt;</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">href = </span><span class="nx">$</span><span class="p">(</span><span class="nx">event</span><span class="p">.</span><span class="nx">currentTarget</span><span class="p">).</span><span class="nx">attr</span><span class="p">(</span><span class="s1">&#39;href&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># chain &#39;or&#39;s for other black list routes</span>
</span><span class='line'>  <span class="nv">passThrough = </span><span class="nx">href</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;sign_out&#39;</span><span class="p">)</span> <span class="o">&gt;=</span> <span class="mi">0</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Allow shift+click for new tabs, etc.</span>
</span><span class='line'>  <span class="k">if</span> <span class="o">!</span><span class="nx">passThrough</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">altKey</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">ctrlKey</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">metaKey</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">event</span><span class="p">.</span><span class="nx">shiftKey</span>
</span><span class='line'>    <span class="nx">event</span><span class="p">.</span><span class="nx">preventDefault</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Remove leading slashes and hash bangs (backward compatablility)</span>
</span><span class='line'>    <span class="nv">url = </span><span class="nx">href</span><span class="p">.</span><span class="nx">replace</span><span class="p">(</span><span class="sr">/^\//</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">).</span><span class="nx">replace</span><span class="p">(</span><span class="s1">&#39;\#\!\/&#39;</span><span class="p">,</span><span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1"># Instruct Backbone to trigger routing events</span>
</span><span class='line'>    <span class="nx">App</span><span class="p">.</span><span class="nx">router</span><span class="p">.</span><span class="nx">navigate</span> <span class="nx">url</span><span class="p">,</span> <span class="p">{</span> <span class="nv">trigger: </span><span class="kc">true</span> <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="kc">false</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thank you TenFarms for the excellent write up on <a href="http://dev.tenfarms.com/posts/proper-link-handling">proper link handling for pushState enabled browsers</a>.</p>

<h4>External Links</h4>

<p>The application will need a small check early in the initialization process to redirect external
links still expecting the #! routing scheme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Our Backbone App namespace</span>
</span><span class='line'><span class="nb">window</span><span class="p">.</span><span class="nv">App =</span>
</span><span class='line'>  <span class="c1"># Namespace Backbone components</span>
</span><span class='line'>  <span class="nv">Models: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">Collections: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">Views: </span><span class="p">{}</span>
</span><span class='line'>  <span class="nv">redirectHashBang: </span><span class="o">-&gt;</span>
</span><span class='line'>    <span class="nb">window</span><span class="p">.</span><span class="nv">location = </span><span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">substring</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># DOM is ready, are we routing a #!?</span>
</span><span class='line'><span class="nx">$</span> <span class="o">-&gt;</span>
</span><span class='line'>  <span class="k">if</span> <span class="nb">window</span><span class="p">.</span><span class="nx">location</span><span class="p">.</span><span class="nx">hash</span><span class="p">.</span><span class="nx">indexOf</span><span class="p">(</span><span class="s1">&#39;!&#39;</span><span class="p">)</span> <span class="o">&gt;</span> <span class="o">-</span><span class="mi">1</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">App</span><span class="p">.</span><span class="nx">redirectHashBang</span><span class="p">()</span>
</span><span class='line'>  <span class="c1"># else... continue on with initialization</span>
</span></code></pre></td></tr></table></div></figure>


<h3>The Server</h3>

<p>Now that our app will receive requests to full URLs
&#8216;http://artsy.net/artwork/mattew-abbott-lobby-and-supercomputer&#8217;
instead of &#8216;http://artsy.net/#!/artwork/mattew-abbott-lobby-and-supercomputer&#8217;,
we need to update our Rails setup.</p>

<p>Below is an excerpt from our Rails application&#8217;s router.
Note references to our home and artworks controllers. Both use a <code>before</code> filter
to determine a user&#8217;s authentication state and serve a different layout, with
unique assets or Backbone applications.</p>

<p>Controllers related to specific models now have the opportunity to
bootstrap associated JSON or mark up and we now get expected 404 (file not found)
error behavior without extra work required by a hash routing scheme.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1"># Server - Rails</span>
</span><span class='line'><span class="no">Application</span><span class="o">.</span><span class="n">routes</span><span class="o">.</span><span class="n">draw</span> <span class="k">do</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">root</span> <span class="ss">:to</span> <span class="o">=&gt;</span> <span class="s2">&quot;home#index&quot;</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Controller logic determines the layout and could bootstrap data</span>
</span><span class='line'>  <span class="n">resources</span> <span class="ss">:artworks</span><span class="p">,</span> <span class="n">path</span><span class="p">:</span> <span class="s2">&quot;artwork&quot;</span><span class="p">,</span> <span class="n">only</span><span class="p">:</span> <span class="ss">:show</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># Plural to singular redirect - mistakes happen!</span>
</span><span class='line'>  <span class="n">get</span> <span class="s2">&quot;/artworks/:id&quot;</span> <span class="o">=&gt;</span> <span class="n">redirect</span><span class="p">(</span><span class="s1">&#39;/artwork/%{id}&#39;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1"># No match? Rails handles routing the 404 error.</span>
</span><span class='line'>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>An added bonus here is a near one to one mapping with the Rails and client routes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='coffeescript'><span class='line'><span class="c1"># Backbone.js - Client</span>
</span><span class='line'><span class="k">class</span> <span class="nx">App</span><span class="p">.</span><span class="nx">Routers</span><span class="p">.</span><span class="nx">Client</span> <span class="k">extends</span> <span class="nx">Backbone</span><span class="p">.</span><span class="nx">Router</span>
</span><span class='line'>
</span><span class='line'>  <span class="nv">routes:</span>
</span><span class='line'>    <span class="s1">&#39;&#39;</span>            <span class="o">:</span> <span class="s1">&#39;home&#39;</span>
</span><span class='line'>    <span class="s1">&#39;artwork/:id&#39;</span> <span class="o">:</span> <span class="s1">&#39;artwork&#39;</span>
</span><span class='line'>    <span class="s1">&#39;artworks/:id&#39;</span><span class="o">:</span> <span class="s1">&#39;redirectToArtwork&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<h2>URLs R 4 Ever</h2>

<p>Dan Webb&#8217;s assertion that <a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">URLs are forever</a> is correct,
but so is Isaac Asimov&#8217;s statement on change. You can&#8217;t predict the future.
You make decisions based on the best data you have at the time. We started our app with hashtag routing
in early 2011 and added the ! around five months later (about the same time Dan Webb wrote his post).
Had we started Artsy today, even six months ago, I&#8217;m confident we would have enabled Backbone&#8217;s pushState routing.
There&#8217;s no need to look back. The future is here and its URLs are #! free!</p>

<h3>Footnotes</h3>

<ul>
<li><a href="http://documentcloud.github.com/backbone">Backbone.js</a></li>
<li><a href="https://developers.google.com/webmasters/ajax-crawling/docs/getting-started">Google offers #! to aid the crawlability of AJAX hash routed applications</a></li>
<li><a href="http://caniuse.com/#feat=history">Browser support for the HTML5 History API (aka pushState)</a></li>
<li><a href="http://www.adequatelygood.com/2011/2/Thoughts-on-the-Hashbang">Twitter advocates #!</a></li>
<li><a href="http://danwebb.net/2011/5/28/it-is-about-the-hashbangs">Dan Webb&#8217;s critique <em>It&#8217;s About the Hashbangs</em></a></li>
<li><a href="http://engineering.twitter.com/2012/05/improving-performance-on-twittercom.html">Twitter ditches #!</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
